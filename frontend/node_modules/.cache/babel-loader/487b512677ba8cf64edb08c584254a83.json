{"ast":null,"code":"var _jsxFileName = \"/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/charts/CountryMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\"; // import * as d3Module from \"d3\"\n\nimport d3 from \"./d3-tip-example\";\nimport * as topojson from \"topojson\";\nimport data from './world_countries.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst format = d3.format(\",\"); // const d3 = {\n//   ...d3Module,\n// }\n\nexport default function CountryMap({\n  mapData,\n  colorMap\n}) {\n  _s();\n\n  // console.log(\"mapData:\",  mapData)\n  // console.log(\"colorMap:\",  colorMap)\n  // console.log(\"data:\", data)\n  const svgRef = useRef(); // console.log(\"d3Tip\", d3)\n\n  useEffect(async () => {\n    function displayMap(feature) {\n      var optionByCountry = {};\n      var colorVal = {};\n      mapData.forEach(function (d) {\n        optionByCountry[d.iso] = +d[feature];\n      }); // max=0\n      // function getMaxVal() {\n      //   return mapData.reduce((max, p) => +p[feature] > max ? +p[feature]: max, mapData[0][feature]);\n      // }\n      // maxVal=getMaxVal()\n      // min=-2\n      // function getMinVal() {\n      //   return mapData.reduce((min, p) => +p[feature] < min ? +p[feature]: min, mapData[0][feature]);\n      // }\n      // minVal=getMinVal()\n      // range=(maxVal/10)\n      // var i;\n      // var label=[]\n      // xmin=minVal\n      // range=range.toFixed(2)\n      // for (i = 0; i < 10; i++) { \n      //   xmin=Number(xmin).toFixed(2)\n      //   newrange=(Number(xmin)+Number(range)).toFixed(2)\n      //   label[i]=((xmin).toString())+\"-\"+(newrange.toString());\n      //   xmin=newrange\n      // }\n      // if(document.getElementById(\"legend\"))\n      // document.getElementById(\"legend\").remove();\n      // //adding legend\n      // var g = svg.append(\"g\")\n      // .attr(\"class\", \"legendThreshold\")\n      // .attr(\"transform\", \"translate(5,320)\");\n      // g.append(\"text\")\n      // .attr(\"class\", \"caption\")\n      // .attr(\"id\",\"legend\")\n      // .attr(\"x\", 0)\n      // .attr(\"y\", -10)\n      // .text(function (d){\n      //   return feature;\n      // });\n      // var legend = d3.legendColor()\n      // .labels(function (d) { return label[d.i]; })\n      // .shapePadding(4)\n      // .scale(color);\n      // svg.select(\".legendThreshold\")\n      // .call(legend);\n\n      colorMap.forEach(function (d) {\n        colorVal[d.iso] = d[feature + \"_scaled\"];\n      }); // console.log(colorVal)\n\n      data.features.forEach(function (d) {\n        d[feature] = optionByCountry[d.id];\n      });\n      svg.append(\"g\").attr(\"class\", \"countries\").selectAll(\"path\").data(data.features).enter().append(\"path\").attr(\"d\", path).style(\"fill\", function (d) {\n        return color(colorVal[d.id]);\n      }).style('stroke', 'white').style('stroke-width', 1.5).style(\"opacity\", 0.8) // tooltips\n      .style(\"stroke\", \"white\").style('stroke-width', 0.3).on('mouseover', function (d) {\n        tip.show(d, feature);\n        d3.select(this).style(\"opacity\", 1).style(\"stroke\", \"white\").style(\"stroke-width\", 3);\n      }).on('mouseout', function (d) {\n        tip.hide(d, feature);\n        d3.select(this).style(\"opacity\", 0.8).style(\"stroke\", \"white\").style(\"stroke-width\", 0.3);\n      }).on('click', function (d) {\n        console.log(d.properties.name);\n        var country = d.properties.name; // drawBarChart(d.properties.name)\n        // drawRadarPlot(d.properties.name); //print selected country name\n      });\n      svg.append(\"path\").data(topojson.mesh(data.features, function (a, b) {\n        return a.id !== b.id;\n      })).attr(\"class\", \"names\").attr(\"d\", path);\n    }\n\n    const tip = d3.tip().attr('class', 'd3-tip').offset([-10, 0]).html(function (d, name) {\n      return `<strong>Country: </strong><span class='details'> ${d.properties.name} <br></span><strong>${name}: </strong><span class='details'> ${format(d[name])}</span>`;\n    });\n    const margin = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n    const width = 800 - margin.left - margin.right;\n    const height = 500 - margin.top - margin.bottom;\n    const color = d3.scaleThreshold().domain([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).range([\"rgb(247,251,255)\", \"rgb(222,235,247)\", \"rgb(198,219,239)\", \"rgb(158,202,225)\", \"rgb(107,174,214)\", \"rgb(66,146,198)\", \"rgb(33,113,181)\", \"rgb(8,81,156)\", \"rgb(8,48,107)\", \"rgb(3,19,43)\"]);\n    const svg = d3.select(svgRef.current) // .attr(\"width\", width)\n    // .attr(\"height\", height)\n    .append('g').attr('class', 'map');\n    const projection = d3.geoMercator().scale(80).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection);\n    svg.call(tip);\n    var options = [\"Score\", \"Overall rank\", \"GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\", \"Perceptions of corruption\", \"Population\", \"Percentage\", \"percentage_non_religious\"]; // var dropdown = document.createElement(\"SELECT\");\n    // dropdown.className='list'\n    // dropdown.setAttribute('transform','transform(3,20)' )\n\n    dropdown.setAttribute('x', 100);\n    dropdown.setAttribute('y', 30);\n    svgRef.current.append(dropdown); //dropdown.id=\"dropdown\";\n\n    d3.select(dropdown).selectAll('myOptions').data(options).enter().append('option').text(function (d) {\n      return d;\n    }) // text showed in the menu\n    .attr(\"value\", function (d) {\n      return d;\n    });\n    displayMap(\"Score\"); // d3.select(\"#menu\").on(\"change\", function(){\n    //     selected_feature=d3.select(\"#menu\").property(\"value\");\n    //     // console.log(selected_feature)\n    //     displayMap(selected_feature) })\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n} // export default CountryMap;\n\n_s(CountryMap, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n\n_c = CountryMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountryMap\");","map":{"version":3,"sources":["/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/charts/CountryMap.js"],"names":["React","useRef","useEffect","d3","topojson","data","format","CountryMap","mapData","colorMap","svgRef","displayMap","feature","optionByCountry","colorVal","forEach","d","iso","features","id","svg","append","attr","selectAll","enter","path","style","color","on","tip","show","select","hide","console","log","properties","name","country","mesh","a","b","offset","html","margin","top","right","bottom","left","width","height","scaleThreshold","domain","range","current","projection","geoMercator","scale","translate","geoPath","call","options","dropdown","setAttribute","text"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\"\n// import * as d3Module from \"d3\"\nimport d3 from \"./d3-tip-example\"\nimport * as topojson from \"topojson\"\nimport data from './world_countries.json'\n\nconst format = d3.format(\",\")\n\n// const d3 = {\n//   ...d3Module,\n  \n// }\nexport default function CountryMap( { mapData, colorMap }) {\n  // console.log(\"mapData:\",  mapData)\n  // console.log(\"colorMap:\",  colorMap)\n  // console.log(\"data:\", data)\n\n  const svgRef = useRef()\n\n  // console.log(\"d3Tip\", d3)\n\n  useEffect(async()=> {\n\n    function displayMap(feature){\n      var optionByCountry={};\n      var colorVal={};\n          \n      mapData.forEach(function (d)  { \n        optionByCountry[d.iso]=+d[feature]; \n      });\n  \n      // max=0\n      // function getMaxVal() {\n      //   return mapData.reduce((max, p) => +p[feature] > max ? +p[feature]: max, mapData[0][feature]);\n      // }\n      // maxVal=getMaxVal()\n  \n      // min=-2\n      // function getMinVal() {\n      //   return mapData.reduce((min, p) => +p[feature] < min ? +p[feature]: min, mapData[0][feature]);\n      // }\n      // minVal=getMinVal()\n  \n      // range=(maxVal/10)\n      \n      // var i;\n      // var label=[]\n      // xmin=minVal\n      // range=range.toFixed(2)\n      // for (i = 0; i < 10; i++) { \n      //   xmin=Number(xmin).toFixed(2)\n      //   newrange=(Number(xmin)+Number(range)).toFixed(2)\n      //   label[i]=((xmin).toString())+\"-\"+(newrange.toString());\n      //   xmin=newrange\n      // }\n      \n      // if(document.getElementById(\"legend\"))\n      // document.getElementById(\"legend\").remove();\n  \n      // //adding legend\n      // var g = svg.append(\"g\")\n      // .attr(\"class\", \"legendThreshold\")\n      // .attr(\"transform\", \"translate(5,320)\");\n      // g.append(\"text\")\n      // .attr(\"class\", \"caption\")\n      // .attr(\"id\",\"legend\")\n      // .attr(\"x\", 0)\n      // .attr(\"y\", -10)\n      // .text(function (d){\n      //   return feature;\n      // });\n  \n      // var legend = d3.legendColor()\n      // .labels(function (d) { return label[d.i]; })\n      // .shapePadding(4)\n      // .scale(color);\n      // svg.select(\".legendThreshold\")\n      // .call(legend);\n  \n      colorMap.forEach(function (d)  { \n        colorVal[d.iso]=d[feature+\"_scaled\"]; \n      });\n  \n      // console.log(colorVal)\n      data.features.forEach(function(d) { d[feature] = optionByCountry[d.id] });\n      svg.append(\"g\")\n        .attr(\"class\", \"countries\")\n      .selectAll(\"path\")\n        .data(data.features)\n        .enter().append(\"path\")\n        .attr(\"d\", path)\n          .style(\"fill\", function(d) { \n            return color(colorVal[d.id]); })\n          .style('stroke', 'white')\n          .style('stroke-width', 1.5)\n          .style(\"opacity\",0.8)\n    // tooltips\n          .style(\"stroke\",\"white\")\n        .style('stroke-width', 0.3)\n      .on('mouseover',function(d){\n  \n          tip.show(d,feature);\n        d3.select(this)\n          .style(\"opacity\", 1)\n          .style(\"stroke\",\"white\")\n          .style(\"stroke-width\",3)\n      })\n      .on('mouseout', function(d){\n          tip.hide(d,feature);\n  \n        d3.select(this)\n          .style(\"opacity\", 0.8)\n          .style(\"stroke\",\"white\")\n          .style(\"stroke-width\",0.3);\n      })\n      .on('click', function(d){\n        console.log(d.properties.name); \n        var country= d.properties.name;\n        // drawBarChart(d.properties.name)\n        // drawRadarPlot(d.properties.name); //print selected country name\n      });\n  \n  svg.append(\"path\")\n    .data(topojson.mesh(data.features, function(a, b) { return a.id !== b.id; }))\n    .attr(\"class\", \"names\")\n    .attr(\"d\", path);  \n  }\n\n    const tip = d3.tip()\n      .attr('class', 'd3-tip')\n      .offset([-10, 0])\n      .html(function(d,name) {\n        return `<strong>Country: </strong><span class='details'> ${d.properties.name} <br></span><strong>${name}: </strong><span class='details'> ${format(d[name])}</span>`;\n      })\n\n    const margin = {top: 0, right: 0, bottom: 0, left: 0}\n    const width = 800 - margin.left - margin.right\n    const height = 500 - margin.top - margin.bottom\n\n    const color = d3.scaleThreshold()\n      .domain([1,2,3,4,5,6,7,8,9,10])\n      .range([\"rgb(247,251,255)\", \"rgb(222,235,247)\", \"rgb(198,219,239)\", \"rgb(158,202,225)\", \"rgb(107,174,214)\", \"rgb(66,146,198)\",\"rgb(33,113,181)\",\"rgb(8,81,156)\",\"rgb(8,48,107)\",\"rgb(3,19,43)\"])\n  \n    const svg = d3.select(svgRef.current)\n      // .attr(\"width\", width)\n      // .attr(\"height\", height)\n      .append('g')\n      .attr('class', 'map')\n\n      const projection = d3.geoMercator()\n      .scale(80)\n      .translate( [width / 2, height / 2])\n    \n    const path = d3.geoPath()\n      .projection(projection)\n\n      svg.call(tip)\n\n\n      var options=[\"Score\",\"Overall rank\",\"GDP per capita\",\"Social support\", \"Healthy life expectancy\",\"Freedom to make life choices\",\"Generosity\",\n      \"Perceptions of corruption\",\"Population\",\"Percentage\",\"percentage_non_religious\"]\n      \n      // var dropdown = document.createElement(\"SELECT\");\n      // dropdown.className='list'\n      // dropdown.setAttribute('transform','transform(3,20)' )\n      dropdown.setAttribute('x', 100)\n      dropdown.setAttribute('y',30)\n      svgRef.current.append(dropdown);\n      //dropdown.id=\"dropdown\";\n\n      d3.select(dropdown)\n            .selectAll('myOptions')\n              .data(options)\n            .enter()\n              .append('option')\n            .text(function (d) { return d; }) // text showed in the menu\n            .attr(\"value\", function (d) { return d; })\n      \n    displayMap(\"Score\")\n  \n      // d3.select(\"#menu\").on(\"change\", function(){\n      //     selected_feature=d3.select(\"#menu\").property(\"value\");\n      //     // console.log(selected_feature)\n      //     displayMap(selected_feature) })\n\n  \n  \n  }, [])\n  return(\n    <svg ref={svgRef}>\n      <select className='menu'></select>\n    </svg>\n  )\n}\n\n// export default CountryMap;\n"]},"metadata":{},"sourceType":"module"}