[{"/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/index.js":"1","/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/App.js":"2","/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/reportWebVitals.js":"3","/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/charts/BarChart.js":"4","/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/charts/CountryMap.js":"5"},{"size":500,"mtime":1619108272632,"results":"6","hashOfConfig":"7"},{"size":6795,"mtime":1620676371094,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1619108272632,"results":"9","hashOfConfig":"7"},{"size":350,"mtime":1620582729310,"results":"10","hashOfConfig":"7"},{"size":2678,"mtime":1620676371095,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fe1r3h",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/index.js",[],"/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/App.js",[],"/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/reportWebVitals.js",[],"/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/charts/BarChart.js",[],"/Users/snoopy/PycharmProjects/Vis_project/CSE_564_Project_42/frontend/src/charts/CountryMap.js",["22"],{"ruleId":"23","severity":1,"message":"24","line":16,"column":13,"nodeType":"25","endLine":84,"endColumn":6},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression"]