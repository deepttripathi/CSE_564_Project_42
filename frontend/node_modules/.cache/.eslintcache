[{"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/index.js":"1","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/reportWebVitals.js":"2","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/App.js":"3","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/CountryMap.js":"4","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/scatterplot.js":"5","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/pcp.js":"6","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/scatterPlot1.js":"7","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/radarChartN.js":"8","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/d3-tip-example.js":"9","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/Piechart.js":"10"},{"size":500,"mtime":1620693420839,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1620693420839,"results":"13","hashOfConfig":"12"},{"size":10993,"mtime":1621047946064,"results":"14","hashOfConfig":"12"},{"size":6239,"mtime":1620932933087,"results":"15","hashOfConfig":"12"},{"size":6308,"mtime":1620914368511,"results":"16","hashOfConfig":"12"},{"size":8811,"mtime":1620944580900,"results":"17","hashOfConfig":"12"},{"size":6982,"mtime":1620939444181,"results":"18","hashOfConfig":"12"},{"size":14847,"mtime":1621035935508,"results":"19","hashOfConfig":"12"},{"size":8303,"mtime":1620693610682,"results":"20","hashOfConfig":"12"},{"size":3847,"mtime":1621036062705,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"znx07f",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/index.js",[],["47","48"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/reportWebVitals.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/App.js",["49","50","51","52"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/CountryMap.js",["53","54","55","56"],"import React, { useRef, useEffect } from \"react\"\n// import * as d3Module from \"d3\"\nimport d3 from \"./d3-tip-example\"\nimport * as topojson from \"topojson\"\nimport data from './world_countries.json'\n// import * as d3legend from \"./d3-legend\";\nimport { event, zoom as zoomM } from 'd3'\nconst format = d3.format(\",\")\n\n// const d3 = {\n//   ...d3Module,\n\n// }\nexport default function CountryMap({ mapData, colorMap, feature, setRadialCountry }) {\n  const svgRef = useRef()\n\n  useEffect(async () => {\n\n    displayMap(mapData, colorMap, feature)\n  }, [mapData, colorMap, feature])\n\n\n\n  // d3.select(\"#menu\").on(\"change\", function(){\n  //     selected_feature=d3.select(\"#menu\").property(\"value\");\n  //     // console.log(selected_feature)\n  //     displayMap(selected_feature) })\n\n\n\n  async function displayMap(mapData, colorMap, feature) {\n\n    const tip = d3.tip()\n      .attr('class', 'd3-tip')\n      .offset([-10, 0])\n      .html(function (d, name) {\n        return `<strong>Country: </strong><span class='details'> ${d.properties.name} <br></span><strong>${name}: </strong><span class='details'> ${format(d[name])}</span>`;\n      })\n\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 }\n    const width = 800 - margin.left - margin.right\n    const height = 500 - margin.top - margin.bottom\n\n    const color = d3.scaleThreshold()\n      .domain([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n      .range([\"rgb(247,251,255)\", \"rgb(222,235,247)\", \"rgb(198,219,239)\", \"rgb(158,202,225)\", \"rgb(107,174,214)\", \"rgb(66,146,198)\", \"rgb(33,113,181)\", \"rgb(8,81,156)\", \"rgb(8,48,107)\", \"rgb(3,19,43)\"])\n\n\n\n    // var options = [\"Score\", \"Overall rank\", \"GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\",\n    //   \"Perceptions of corruption\", \"Population\", \"Percentage\", \"percentage_non_religious\"]\n    const svg = d3.select(svgRef.current)\n\n\n    svg.selectAll(\"*\").remove();\n\n    svg.attr('class', 'map')\n      .attr('id', 'worldmap')\n      .append('g')\n\n    // const width = +svg.attr('width')\n    // const height = +svg.attr('height')\n\n\n\n    // d3.select('.list')\n    //   .selectAll('myOptions')\n    //   .data(options)\n    //   .enter()\n    //   .append('option')\n    //   .text(function (d) { return d; }) // text showed in the menu\n    //   .attr(\"value\", function (d) { return d; })\n\n    const projection = d3.geoMercator()\n      .scale(82)\n      .translate([width / 2.5, 230])\n\n    const path = d3.geoPath()\n      .projection(projection)\n\n    svg.call(tip)\n\n    var optionByCountry = {};\n    var colorVal = {};\n\n    console.log('percentage', mapData)\n\n    mapData.forEach(function (d) {\n      if (feature == 'Percentage') {\n        optionByCountry[d.iso] = d[feature];\n      }\n      else\n        optionByCountry[d.iso] = +d[feature];\n    });\n\n    // var max=0\n    // function getMaxVal() {\n    //   return mapData.reduce((max, p) => +p[feature] > max ? +p[feature]: max, mapData[0][feature]);\n    // }\n    // var maxVal=getMaxVal()\n\n    // var min=-2\n    // function getMinVal() {\n    //   return mapData.reduce((min, p) => +p[feature] < min ? +p[feature]: min, mapData[0][feature]);\n    // }\n    // var minVal=getMinVal()\n\n    // var range=(maxVal/10)\n\n    // var i;\n    // var label=[]\n    // var xmin=minVal\n    // range=range.toFixed(2)\n    // for (i = 0; i < 10; i++) { \n    //   xmin=Number(xmin).toFixed(2)\n    //   var newrange=(Number(xmin)+Number(range)).toFixed(2)\n    //   label[i]=((xmin).toString())+\"-\"+(newrange.toString());\n    //   xmin=newrange\n    // }\n\n    // if(document.getElementById(\"legend\"))\n    // document.getElementById(\"legend\").remove();\n\n    // //adding legend\n    // var g = svg.append(\"g\")\n    // .attr(\"class\", \"legendThreshold\")\n    // .attr(\"transform\", \"translate(5,320)\");\n    // g.append(\"text\")\n    // .attr(\"class\", \"caption\")\n    // .attr(\"id\",\"legend\")\n    // .attr(\"x\", 0)\n    // .attr(\"y\", -10)\n    // .text(function (d){\n    //   return feature;\n    // });\n\n    // var legend = d3.legendColor()\n    // .labels(function (d) { return label[d.i]; })\n    // .shapePadding(4)\n    // .scale(color);\n    // svg.select(\".legendThreshold\")\n    // .call(legend);\n\n    colorMap.forEach(function (d) {\n      colorVal[d.iso] = d[feature + \"_scaled\"];\n    });\n\n    // console.log(colorVal)\n    data.features.forEach(function (d) { d[feature] = optionByCountry[d.id] });\n    svg.append(\"g\")\n      .attr(\"class\", \"countries\")\n      .style('overflow', 'auto')\n      .selectAll(\"path\")\n      .data(data.features)\n      .enter().append(\"path\")\n      .attr(\"d\", path)\n      .style(\"fill\", function (d) {\n        return color(colorVal[d.id]);\n      })\n      .style('stroke', 'white')\n      .style('stroke-width', 1.5)\n      .style(\"opacity\", 0.8)\n      // tooltips\n      .style(\"stroke\", \"white\")\n      .style('stroke-width', 0.3)\n      .on('mouseover', function (d) {\n\n        tip.show(d, feature);\n        d3.select(this)\n          .style(\"opacity\", 1)\n          .style(\"stroke\", \"white\")\n          .style(\"stroke-width\", 3)\n      })\n      .on('mouseout', function (d) {\n        tip.hide(d, feature);\n\n        d3.select(this)\n          .style(\"opacity\", 0.8)\n          .style(\"stroke\", \"white\")\n          .style(\"stroke-width\", 0.3);\n      })\n      .on('click', function (d) {\n        console.log(d.properties.name);\n        var country = d.properties.name;\n        setRadialCountry(country)\n        // drawBarChart(d.properties.name)\n        // drawRadarPlot(d.properties.name); //print selected country name\n      });\n\n    svg.append(\"path\")\n      .data(topojson.mesh(data.features, function (a, b) { return a.id !== b.id; }))\n      .attr(\"class\", \"names\")\n      .attr(\"d\", path);\n\n    let zoom = zoomM()\n      .scaleExtent([1, 1.25])\n      .translateExtent([[-220, -50], [880, 420]])\n      .on('zoom', () => {\n        // console.log('hello dere', +svg.attr('height'));\n        // var g= d3.select(this)\n        // svg.selectAll('paths')\n        // svg.selectAll('g')\n        svg.attr('transform', event.transform)\n      });\n    svg.call(zoom);\n  }\n  return (\n    <div style={{ height: \"100%\", width: \"100%\", overflow: \"visible\" }}>\n      <svg style={{ height: \"100%\", width: \"100%\" }} className='svgcontainer' id='svg' ref={svgRef}>\n      </svg>\n    </div>\n  )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/scatterplot.js",["57","58","59","60","61","62","63","64"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3Module from \"d3\"\nimport {event} from 'd3'\n\n\nconst d3 = {\n    ...d3Module\n}\n\n\nexport default function ScatterPlot({data, feature}) {\n\n\n    console.log(\"data scatter :\", data)\n    const svgRef = useRef()\n\n    useEffect(async () => {\n\n    var color= d3.scaleOrdinal(d3.schemeCategory10)\n        \n    var xdata = [];\n    for (var i=0; i<data.length ; i++){\n        if ((data[i][feature] ==0 || (data[i][feature] == null )) ||  (data[i]['Percentage']==0 || (data[i]['Percentage'] == null ))){\n            continue\n        }\n        else{\n            xdata[i] = data[i]['Percentage']\n        }\n        \n    }\n\n    var ydata = [];\n    for (var j=0; j<data.length ; j++){\n        if ((data[j][feature] ==0 || (data[j][feature] == null )) ||  (data[j]['Percentage']==0 || (data[j]['Percentage'] == null ))){\n            continue\n        }\n        else{\n            if (feature == 'Population')\n                ydata[j] = data[j][feature]/100000\n            else{\n                ydata[j] = data[j][feature]\n            }\n        }\n    }\n\n    var svg = d3.select(svgRef.current)\n        .attr(\"id\",\"scattersvg\")\n        .attr(\"class\",\"scatter\")\n\n    svg.selectAll(\"*\").remove();\n    //    var margin = 200,\n        var width = 220,\n         height = 230;\n\n     \n    var x = d3.scaleLinear().range([0, width]);\n    var y = d3.scaleLinear().range([height, 0]);\n    var g = svg.append(\"g\")\n    .attr(\"transform\", \"translate(\" + 80 + \",\" + 5 + \")\");\n\n    var xmin = d3.min(xdata);\n    var xmax = d3.max(xdata);\n    x.domain([xmin-0.15, xmax]);\n\n    var xAxis = g.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x))\n          .attr(\"font-size\",\"11px\")\n\n    g.append(\"g\")\n    .append(\"text\")\n    // .attr(\"transform\", \"translate(0, 0)\")\n     .attr(\"y\", 275)\n     .attr(\"x\", width/2)\n     .attr(\"text-anchor\", \"middle\")\n     .attr(\"fill\", \"black\")\n     .attr(\"font-family\", \"sans-serif\")\n     .attr(\"font-size\", \"12px\")\n     .text(\"Internet users(%)\")\n     .attr('font-weight','bold');\n\n      var ymin = d3.min(ydata)\n      var ymax = d3.max(ydata)\n      y.domain([0, ymax]);\n\n      g.append(\"g\")\n          .call(d3.axisLeft(y).tickFormat(function(d){\n              return d;\n          }).ticks(10))\n          .attr(\"font-size\",\"11px\")\n\n      g.append(\"g\")\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 30)\n        .attr(\"x\", -150)\n        .attr(\"dy\", \"-5.1em\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"fill\", \"black\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"12px\")\n        .text(feature)\n        .attr('font-weight','bold');\n\n\n     g.append(\"g\")\n         .call(d3.axisLeft(y).tickFormat(\"\").ticks(10).tickSizeInner(-width))\n         .attr(\"class\", \"grid\");\n      \n    var clip = g.append(\"defs\").append(\"svg:clipPath\")\n         .attr(\"id\", \"clip1\")\n         .append(\"svg:rect\")\n         .attr(\"width\", 230 )\n         .attr(\"height\", 500 )\n         .attr(\"x\", -1)\n         .attr(\"y\", -10);\n\n        //  var scatter = g.append('g')\n    var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n        .extent( [ [0,0], [width,height] ] ) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n        .on(\"end\", updateChart) \n\n      var scatter = g.append('g')\n        .attr(\"clip-path\", \"url(#clip1)\")\n\n    scatter\n        .selectAll(\"circle\")\n        .data(xdata)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", function (d,i) { return x(xdata[i]); } )\n        .attr(\"cy\", function (d,i) { return y(ydata[i]); } )\n        .attr(\"r\", 4)\n        .style(\"fill\", function(d,i){\n            // console.log(color[jsdata[\"clusterId\"][i]]+\"---\"+jsdata[\"clusterId\"][i])\n              return color(data[i]['clusterId']);\n          })\n        .style(\"opacity\", 0.7);\n\n            // Add the brushing\n    scatter\n        .append(\"g\")\n          .attr(\"class\", \"brush\")\n          .call(brush);\n  \n    \n    // A function that set idleTimeOut to null\n    var idleTimeout\n    function idled() { idleTimeout = null; }\n  \n    // A function that update the chart for given boundaries\n    function updateChart() {\n\n    var extent = event.selection\n\n\n    // If no selection, back to initial coordinate. Otherwise, update X axis domain\n    if(!extent){\n        if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n        x.domain([ xmin-0.15, xmax])\n        }else{\n            x.domain([ x.invert(extent[0]), x.invert(extent[1]) ])\n            scatter.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n    }\n\n    // Update axis and circle position\n    xAxis.transition().duration(1000).call(d3.axisBottom(x))\n    scatter\n        .selectAll(\"circle\")\n        .transition().duration(1000)\n        .attr(\"cx\", function (d,i) { return x(xdata[i]); } )\n        .attr(\"cy\", function (d,i) { return y(ydata[i]); } )\n\n    }    \n    var keys = [\"Cluster 0\", \"Cluster 1\", \"Cluster 2\"]\n        \n        //   Add one dot in the legend for each name.\n    g.selectAll(\"mydots\")\n    .data(keys)\n    .enter()\n    .append(\"circle\")\n        .attr(\"cx\", -77)\n        .attr(\"cy\", function(d,i){ return 0 + i*16}) // 100 is where the first dot appears. 25 is the distance between dots\n        .attr(\"r\", 3)\n        .style(\"fill\", function(d, i){ \n        const index = keys.findIndex(dim => dim === d);\n        // console.log('color log', index )\n        return color(index)\n    })\n          \n          // Add one dot in the legend for each name.\n    g.selectAll(\"mylabels\")\n    .data(keys)\n    .enter()\n    .append(\"text\")\n        .attr(\"x\", -74)\n        .attr(\"y\", function(d,i){ return 0 + i*16}) // 100 is where the first dot appears. 25 is the distance between dots\n        .style(\"fill\", \"black\")\n        .text(function(d){ return d})\n        .attr(\"text-anchor\", \"left\")\n        .style(\"alignment-baseline\", \"middle\")\n        .style(\"font-size\",\"11px\")\n        .attr('font-weight','bold');\n\n\n\n\n    },[data, feature])\n    return(\n        <svg style={{ height: \"100%\", width: \"100%\" }} className='scatter' id='scatterid' ref={svgRef}></svg>\n    )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/pcp.js",["65","66","67","68","69"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3 from \"d3\"\nimport { drag, event } from 'd3'\n// const d3 = {\n//     ...d3Module\n// }\n\nexport default function ParallelChart({ data, setPieData }) {\n    const svgRef = useRef()\n\n    useEffect(async () => {\n        if (data.length == 0)\n            return\n        var color = d3.scaleOrdinal(d3.schemeCategory10)\n\n        var width = 640;\n        var height = 250;\n\n        var x = d3.scalePoint().range([1, width], 1),\n            y = {},\n            dragging = {};\n\n        var line = d3.line(),\n            axis = d3.axisLeft(),\n            background,\n            foreground;\n\n        var svg = d3.select(svgRef.current).attr(\"class\", \"scatter\")\n            .attr(\"id\", \"scattersvg\")\n            // .attr(\"width\", width + margin.left + margin.right)\n            // .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + 25 + \",\" + 20 + \")\");\n\n        var dimensions = ['Score', \"GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\",\n            \"Perceptions of corruption\", \"percentage_non_religious\", \"Percentage\", 'Population']\n\n        var updatedDimensions = ['Score', 'GDP', 'Social', 'Health', 'Freedom', 'Generosity', 'Corruption', 'Non-religious', 'Internet%', 'Population']\n\n        var pieDimensions = [\"Western Europe\", \"North America and ANZ\", \"Middle East and North Africa\", \"Central and Eastern Europe\", \"Latin America and Caribbean\", \"East Asia\", \"Southeast Asia\", \"Sub-Saharan Africa\", \"Commonwealth of Independent States\", \"South Asia\"]\n\n        x.domain(dimensions);\n\n\n\n\n        dimensions.forEach(d => {\n            y[d] = d3.scaleLinear()\n                .domain(d3.extent(data, function (p) {\n                    // console.log('ggg', +p[d])\n                    return +p[d];\n                }))\n                .range([height, 0]);\n            y[d].brush = d3.brushY().extent([[-8, y[d].range()[1]], [0, y[d].range()[0]]])\n                .on(\"end\", brush);\n        });\n        // Add grey background lines for context.\n        background = svg.append(\"g\")\n            .attr(\"class\", \"background\")\n            .selectAll(\"path\")\n            .data(data)\n            .enter().append(\"path\")\n            .attr(\"d\", path);\n\n        // Add blue foreground lines for focus.\n        foreground = svg.append(\"g\")\n            .attr(\"class\", \"foreground\")\n            .selectAll(\"path\")\n            .data(data)\n            .enter().append(\"path\")\n            .attr(\"d\", path)\n            .attr(\"stroke\", function (d, i) {\n                return color(data[i]['clusterId']);\n            });\n\n        // Add a group element for each dimension.\n        var g = svg.selectAll(\".dimension\")\n            .data(dimensions)\n            .enter().append(\"g\")\n            .attr(\"class\", \"dimension\")\n            .attr(\"transform\", function (d) {\n                return \"translate(\" + x(d) + \")\";\n            })\n            .call(d3.drag()\n                .subject(function (d) { return { x: x(d) }; })\n                .on(\"start\", function (d) {\n                    dragging[d] = x(d);\n                    background.attr(\"visibility\", \"hidden\");\n\n                    // text.attr('visibility','hidden')\n                    // text.attr('text','white' )\n                })\n                .on(\"drag\", function (d) {\n                    dragging[d] = Math.min(width, Math.max(0, event.x));\n                    foreground.attr(\"d\", path);\n                    dimensions.sort(function (a, b) { return position(a) - position(b); });\n                    x.domain(dimensions);\n                    g.attr(\"transform\", function (d) { return \"translate(\" + position(d) + \")\"; });\n                })\n                .on(\"end\", function (d) {\n                    // console.log(\"Before dragging\", dragging[d]);\n                    delete dragging[d];\n                    console.log(\"After dragging\", dragging[d]);\n                    transition(d3.select(this)).attr(\"transform\", \"translate(\" + x(d) + \")\");\n                    transition(foreground).attr(\"d\", path);\n                    background\n                        .attr(\"d\", path)\n                        .transition()\n                        .delay(500)\n                        .duration(0)\n                        .attr(\"visibility\", null);\n                    // text.attr('visibility','visible')\n\n                }));\n\n        // Add an axis and title.\n        g.append(\"g\")\n            .attr(\"class\", \"axis\")\n            .each(function (d) { d3.select(this).call(axis.scale(y[d])); })\n        g.append(\"text\")\n            .attr('class', 'axisPcp')\n            // .attr('fill','black')\n            .attr('font-size', '9px')\n            .style(\"text-anchor\", \"middle\")\n            .attr(\"y\", -5)\n            .text(function (d) {\n                const index = dimensions.findIndex(dim => dim === d);\n                return updatedDimensions[index]\n                // return d;\n            })\n            .style('cursor', 'move')\n        // .attr('font-weight','bold');\n\n        // s.attr(\"transform\", function (d) { return \"translate(\" + position(d) + \")\"; });\n\n\n        // Add and store a brush for each axis.\n        g.append(\"g\")\n            .attr(\"class\", \"brush\")\n            .each(function (d) {\n                d3.select(this).call(y[d].brush);\n            })\n            .selectAll(\"rect\")\n            .attr(\"x\", -8)\n            .attr(\"width\", 16);\n        // });\n\n\n        function position(d) {\n            var v = dragging[d];\n            return v == null ? x(d) : v;\n        }\n\n        function transition(g) {\n            return g.transition().duration(500);\n        }\n\n        // Returns the path for a given data point.\n        function path(d) {\n            return line(dimensions.map(function (p) { return [position(p), y[p](d[p])]; }));\n        }\n\n        function brush() {\n            const actives = [];\n            // filter brushed extents\n            svg.selectAll('.brush')\n                .filter(function (d) {\n                    return d3.brushSelection(this);\n                })\n                .each(function (d) {\n                    actives.push({\n                        dimension: d,\n                        extent: d3.brushSelection(this)\n                        // values: \n                    });\n                });\n            // set un-brushed foreground line disappear\n            foreground.style('display', function (d) {\n                return actives.every(function (active) {\n                    const dim = active.dimension;\n                    return active.extent[0] <= y[dim](d[dim]) && y[dim](d[dim]) <= active.extent[1];\n                }) ? null : 'none';\n            });\n            console.log(actives)\n            console.log(data)\n\n\n            var pie = [...data]\n            console.log(\"pie before:\", pie)\n            for (var i = 0; i < actives.length; i++) {\n                pie = pie.filter((p, j) => {\n                    return !(p[actives[i].dimension] > y[actives[i].dimension].invert(actives[i].extent[0]) || p[actives[i].dimension] < y[actives[i].dimension].invert(actives[i].extent[1]))\n                    // {\n                    //     console.log(p[actives[i].dimension])\n                    //     console.log(\"min:\", y[actives[i].dimension].invert(actives[i].extent[0]))\n                    //     console.log(\"max:\", y[actives[i].dimension].invert(actives[i].extent[1]))\n                    //     pie.slice(j, 1)\n                    // }\n                })\n                console.log(\"pie after 1 loop\", pie)\n                // for (var j = 0; j < pie.length; j++) {\n                //     // console.log(\"dimension:\", actives[i])\n                //     // console.log(\"y extent 0:\", y[actives[i].dimension].invert(actives[i].extent[0]))\n                //     // console.log(\"active extent 1:\", actives[i].extent[1])\n                //     if ((pie[j][actives[i].dimension]) < y[actives[i].dimension].invert(actives[i].extent[0]) || y[actives[i].dimension](pie[j][actives[i].dimension] > y[actives[i].dimension].invert(actives[i].extent[1]))) {\n                //         // console.log(\"pie dimension value:\", pie[j][actives[i].dimension])\n\n                //         j--\n                //     }\n                // }\n            }\n\n            console.log(\"pie after: \", pie)\n            var count = new Array(10).fill(0)\n            pie.forEach((p, k) => {\n                const index = pieDimensions.findIndex(dim => dim === p['Regional indicator'])\n                count[index]++\n            })\n            console.log(\"count\", count)\n            setPieData(count)\n        }\n    }, [data])\n    return (\n        <svg style={{ height: \"100%\", width: \"100%\" }} ref={svgRef}></svg>\n    )\n\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/scatterPlot1.js",["70","71","72","73","74","75"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3Module from \"d3\"\nimport { event } from 'd3'\n\n\nconst d3 = {\n    ...d3Module\n}\n\n\nexport default function ScatterPlot1({ data, feature }) {\n\n\n    console.log(\"data scatter :\", data)\n    const svgRef = useRef()\n\n    useEffect(async () => {\n\n        var color = d3.scaleOrdinal(d3.schemeCategory10)\n\n        var xdata = [];\n        for (var i = 0; i < data.length; i++) {\n            if ((data[i]['percentage_non_religious'] == 0 || (data[i]['percentage_non_religious'] == null))) {\n                continue\n            }\n            else {\n                xdata[i] = data[i]['percentage_non_religious']\n            }\n\n        }\n\n        var ydata = [];\n        for (var j = 0; j < data.length; j++) {\n            if ((data[j]['percentage_non_religious'] == 0 || (data[j]['percentage_non_religious'] == null))) {\n                continue\n            }\n            else {\n                if (feature == 'Population')\n                    ydata[j] = data[j][feature] / 100000\n                else {\n                    ydata[j] = data[j][feature]\n                }\n            }\n        }\n\n        var svg = d3.select(svgRef.current)\n            .attr(\"id\", \"scattersvg\")\n            .attr(\"class\", \"scatter\")\n\n        svg.selectAll(\"*\").remove();\n        //    var margin = 200,\n        var width = 220,\n            height = 230;\n\n\n        var x = d3.scaleLinear().range([0, width]);\n        var y = d3.scaleLinear().range([height, 0]);\n        var g = svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + 80 + \",\" + 40 + \")\");\n\n        var xmin = d3.min(xdata);\n        var xmax = d3.max(xdata);\n        // x.domain([0,width])\n        x.domain([xmin - 0.15, xmax]);\n\n        var xAxis = g.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n        //   .attr(\"font-size\",\"11px\")\n\n        g.append(\"g\")\n            .append(\"text\")\n            // .attr(\"transform\", \"translate(0, 0)\")\n            .attr(\"y\", 275)\n            .attr(\"x\", width / 2)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"fill\", \"black\")\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", \"12px\")\n            .text(\"Non-religious people(%)\")\n            .attr('font-weight', 'bold');\n\n\n        var ymin = d3.min(ydata)\n        var ymax = d3.max(ydata)\n        y.domain([0, ymax]);\n\n        g.append(\"g\")\n            .call(d3.axisLeft(y).tickFormat(function (d) {\n                return d;\n            }).ticks(10))\n            .attr(\"font-size\", \"11px\")\n\n        g.append(\"g\")\n            .append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 30)\n            .attr(\"x\", -150)\n            .attr(\"dy\", \"-5.1em\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"fill\", \"black\")\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", \"12px\")\n            .text(feature)\n            .attr('font-weight', 'bold');\n\n\n        g.append(\"g\")\n            .call(d3.axisLeft(y).tickFormat(\"\").ticks(10).tickSizeInner(-width))\n            .attr(\"class\", \"grid\");\n\n        var clip = g.append(\"defs\").append(\"svg:clipPath\")\n            .attr(\"id\", \"clip\")\n            .append(\"svg:rect\")\n            .attr(\"width\", 230)\n            .attr(\"height\", 500)\n            .attr(\"x\", -1)\n            .attr(\"y\", -10);\n\n        //  var scatter = g.append('g')\n        var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n            .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n            .on(\"end\", updateChart)\n\n        var scatter = g.append('g')\n            .attr(\"clip-path\", \"url(#clip)\")\n\n        scatter\n            .selectAll(\"circle\")\n            .data(xdata)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", function (d, i) { return x(xdata[i]); })\n            .attr(\"cy\", function (d, i) { return y(ydata[i]); })\n            .attr(\"r\", 4)\n            .style(\"fill\", (d, i) => {\n                return color(data[i]['clusterId']);\n            })\n            .style(\"opacity\", 0.7);\n\n        // Add the brushing\n        scatter\n            .append(\"g\")\n            .attr(\"class\", \"brush\")\n            .call(brush);\n\n\n        // A function that set idleTimeOut to null\n        var idleTimeout\n        function idled() { idleTimeout = null; }\n\n        // A function that update the chart for given boundaries\n        function updateChart() {\n\n            var extent = event.selection\n\n\n            // If no selection, back to initial coordinate. Otherwise, update X axis domain\n            if (!extent) {\n                if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n                x.domain([xmin - 0.15, xmax]);\n            } else {\n                // console.log('extent',x.invert(extent[0]), x.invert(extent[1]) )\n                x.domain([x.invert(extent[0]), x.invert(extent[1])])\n                scatter.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n            }\n\n            // Update axis and circle position\n            xAxis\n                .transition().duration(1000).call(d3.axisBottom(x))\n\n\n            scatter\n                .selectAll(\"circle\")\n                .transition().duration(1000)\n                .attr(\"cx\", function (d, i) { return x(xdata[i]); })\n                .attr(\"cy\", function (d, i) { return y(ydata[i]); })\n\n        }\n\n\n        var keys = [\"Cluster 0\", \"Cluster 1\", \"Cluster 2\"]\n\n        //   Add one dot in the legend for each name.\n        g.selectAll(\"mydots\")\n            .data(keys)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", -77)\n            .attr(\"cy\", function (d, i) { return 0 + i * 16 }) // 100 is where the first dot appears. 25 is the distance between dots\n            .attr(\"r\", 3)\n            .style(\"fill\", function (d, i) {\n                const index = keys.findIndex(dim => dim === d);\n                console.log('color log', index)\n                return color(index)\n            })\n\n        // Add one dot in the legend for each name.\n        g.selectAll(\"mylabels\")\n            .data(keys)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", -74)\n            .attr(\"y\", function (d, i) { return 0 + i * 16 }) // 100 is where the first dot appears. 25 is the distance between dots\n            .style(\"fill\", \"black\")\n            .text(function (d) { return d })\n            .attr(\"text-anchor\", \"left\")\n            .style(\"alignment-baseline\", \"middle\")\n            .style(\"font-size\", \"11px\")\n            .attr('font-weight', 'bold');\n\n\n    }, [data, feature])\n    return (\n        <svg style={{ height: \"100%\", width: \"100%\" }} className='scatter' id='scatterid' ref={svgRef}></svg>\n    )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/radarChartN.js",["76","77","78","79","80","81","82","83","84","85"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/d3-tip-example.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/Piechart.js",["86","87","88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":10,"column":8,"nodeType":"95","messageId":"96","endLine":10,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":12,"column":8,"nodeType":"95","messageId":"96","endLine":12,"endColumn":22},{"ruleId":"93","severity":1,"message":"98","line":15,"column":8,"nodeType":"95","messageId":"96","endLine":15,"endColumn":18},{"ruleId":"99","severity":1,"message":"100","line":209,"column":13,"nodeType":"101","endLine":240,"endColumn":4},{"ruleId":"99","severity":1,"message":"100","line":17,"column":13,"nodeType":"101","endLine":20,"endColumn":4},{"ruleId":"99","severity":1,"message":"102","line":20,"column":6,"nodeType":"103","endLine":20,"endColumn":34,"suggestions":"104"},{"ruleId":"93","severity":1,"message":"105","line":42,"column":11,"nodeType":"95","messageId":"96","endLine":42,"endColumn":17},{"ruleId":"106","severity":1,"message":"107","line":89,"column":19,"nodeType":"108","messageId":"109","endLine":89,"endColumn":21},{"ruleId":"99","severity":1,"message":"100","line":17,"column":15,"nodeType":"101","endLine":208,"endColumn":6},{"ruleId":"106","severity":1,"message":"107","line":23,"column":31,"nodeType":"108","messageId":"109","endLine":23,"endColumn":33},{"ruleId":"106","severity":1,"message":"107","line":23,"column":93,"nodeType":"108","messageId":"109","endLine":23,"endColumn":95},{"ruleId":"106","severity":1,"message":"107","line":34,"column":31,"nodeType":"108","messageId":"109","endLine":34,"endColumn":33},{"ruleId":"106","severity":1,"message":"107","line":34,"column":93,"nodeType":"108","messageId":"109","endLine":34,"endColumn":95},{"ruleId":"106","severity":1,"message":"107","line":38,"column":25,"nodeType":"108","messageId":"109","endLine":38,"endColumn":27},{"ruleId":"93","severity":1,"message":"110","line":82,"column":11,"nodeType":"95","messageId":"96","endLine":82,"endColumn":15},{"ruleId":"93","severity":1,"message":"111","line":110,"column":9,"nodeType":"95","messageId":"96","endLine":110,"endColumn":13},{"ruleId":"93","severity":1,"message":"112","line":3,"column":10,"nodeType":"95","messageId":"96","endLine":3,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":11,"column":15,"nodeType":"101","endLine":222,"endColumn":6},{"ruleId":"106","severity":1,"message":"107","line":12,"column":25,"nodeType":"108","messageId":"109","endLine":12,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":191,"column":34,"nodeType":"101","messageId":"115","endLine":199,"endColumn":18},{"ruleId":"99","severity":1,"message":"116","line":222,"column":8,"nodeType":"103","endLine":222,"endColumn":14,"suggestions":"117"},{"ruleId":"99","severity":1,"message":"100","line":17,"column":15,"nodeType":"101","endLine":213,"endColumn":6},{"ruleId":"106","severity":1,"message":"107","line":23,"column":54,"nodeType":"108","messageId":"109","endLine":23,"endColumn":56},{"ruleId":"106","severity":1,"message":"107","line":34,"column":54,"nodeType":"108","messageId":"109","endLine":34,"endColumn":56},{"ruleId":"106","severity":1,"message":"107","line":38,"column":29,"nodeType":"108","messageId":"109","endLine":38,"endColumn":31},{"ruleId":"93","severity":1,"message":"110","line":84,"column":13,"nodeType":"95","messageId":"96","endLine":84,"endColumn":17},{"ruleId":"93","severity":1,"message":"111","line":112,"column":13,"nodeType":"95","messageId":"96","endLine":112,"endColumn":17},{"ruleId":"99","severity":1,"message":"100","line":31,"column":13,"nodeType":"101","endLine":460,"endColumn":4},{"ruleId":"106","severity":1,"message":"118","line":96,"column":20,"nodeType":"108","messageId":"109","endLine":96,"endColumn":22},{"ruleId":"99","severity":1,"message":"119","line":114,"column":18,"nodeType":"120","endLine":121,"endColumn":7},{"ruleId":"106","severity":1,"message":"118","line":225,"column":23,"nodeType":"108","messageId":"109","endLine":225,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":226,"column":16,"nodeType":"95","messageId":"123","endLine":226,"endColumn":17},{"ruleId":"106","severity":1,"message":"107","line":227,"column":27,"nodeType":"108","messageId":"109","endLine":227,"endColumn":29},{"ruleId":"124","severity":1,"message":"125","line":369,"column":16,"nodeType":"126","messageId":"127","endLine":369,"endColumn":34},{"ruleId":"128","severity":1,"message":"129","line":393,"column":20,"nodeType":"130","messageId":"131","endLine":393,"endColumn":29},{"ruleId":"128","severity":1,"message":"129","line":407,"column":22,"nodeType":"130","messageId":"131","endLine":407,"endColumn":31},{"ruleId":"106","severity":1,"message":"118","line":443,"column":21,"nodeType":"108","messageId":"109","endLine":443,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":11,"column":25,"nodeType":"108","messageId":"109","endLine":11,"endColumn":27},{"ruleId":"106","severity":1,"message":"118","line":20,"column":25,"nodeType":"108","messageId":"109","endLine":20,"endColumn":27},{"ruleId":"132","severity":1,"message":"133","line":117,"column":74,"nodeType":"134","messageId":"135","endLine":117,"endColumn":82},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'InputLabel' is defined but never used.","Identifier","unusedVar","'FormHelperText' is defined but never used.","'Typography' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'displayMap'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'height' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ymin' is assigned a value but never used.","'clip' is assigned a value but never used.","'drag' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'i', 'i', 'i', 'i', 'i'.","unsafeRefs","React Hook useEffect has a missing dependency: 'setPieData'. Either include it or remove the dependency array. If 'setPieData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["139"],"Expected '!==' and instead saw '!='.","Assignments to the 'radialData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-redeclare","'i' is already defined.","redeclared","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [mapData, colorMap, feature, displayMap]",{"range":"144","text":"145"},"Update the dependencies array to be: [data, setPieData]",{"range":"146","text":"147"},[542,570],"[mapData, colorMap, feature, displayMap]",[8707,8713],"[data, setPieData]"]