[{"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/index.js":"1","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/reportWebVitals.js":"2","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/App.js":"3","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/CountryMap.js":"4","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/BarChart.js":"5","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/d3-tip-example.js":"6","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/radarChartN.js":"7"},{"size":500,"mtime":1620693420839,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1620693420839,"results":"10","hashOfConfig":"9"},{"size":8999,"mtime":1620779144667,"results":"11","hashOfConfig":"9"},{"size":6554,"mtime":1620779120400,"results":"12","hashOfConfig":"9"},{"size":300,"mtime":1620752352360,"results":"13","hashOfConfig":"9"},{"size":8303,"mtime":1620693610682,"results":"14","hashOfConfig":"9"},{"size":13339,"mtime":1620777421026,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"15s6spa",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/index.js",[],["32","33"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/reportWebVitals.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/App.js",["34","35"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/CountryMap.js",["36","37"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/BarChart.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/d3-tip-example.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/radarChartN.js",["38","39","40","41","42","43","44"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3Module from \"d3\"\n\nconst d3 = {\n    ...d3Module\n}\n\n\n\n        \n// async function drawRadarPlot(country){\n\n//     chart_url=radar_url;\n//     console.log(chart_url);\n//     var bar_data=await getJson(chart_url);\n\n//     console.log(country)\n\n//     if (country !== 'undefined'){\n//         RadarChart(bar_data, country);\n//     }\n//     else{\n//         console.log('inside draw radar');\n//         RadarChart(bar_data);\n//     }\n        \n\nexport default function RadialChart({radialData}) {\n\n    // if (svgRef.current.document.getElementsByClassName('.radar')) \n\n    // console.log('Radial data: ', radialData);\n    const svgRef = useRef()\n\n    useEffect(async () => {\n    var cfg = {\n      w: 600, //Width of the circle\n      h: 600, //Height of the circle\n      margin: {top: 20, right: 20, bottom: 20, left: 20}, //The margins of the SVG\n      labelFactor: 0.85,  //How much farther than the radius of the outer circle should the labels be placed\n      wrapWidth: 60,      //The number of pixels after which a label needs to be given a new line\n      opacityArea: 0.35,  //The opacity of the area of the blob\n      dotRadius: 4,       //The size of the colored circles of each blog\n      opacityCircles: 0.1,//The opacity of the circles of each blob\n      strokeWidth: 0.7,   //The width of the stroke around each blob\n      roundStrokes: false,//If true the area and stroke will follow a round path (cardinal-closed)\n      color: d3.scaleOrdinal(d3.schemeCategory10),  //Color function\n      hover: true,\n      axisLabels: true,\n      tickLabels: true,\n      fields: false,\n      scalesAndAxes: false,\n    };\n  \n   \n    // console.log(data)\n\n    // function userExists(countryName) {\n    //     return data.some(function(el) {\n    //         if (el.country === countryName){\n    //             console.log('----')\n    //             console.log([el])\n    //             data=[el]\n    //         }\n    // }); \n    // }\n    // // \n    // userExists(country_name)\n    // console.log('-----')\n    // console.log(country_name)\n    // if (country_name !== 'undefined'){\n    //     cfg.opacityArea=0.01\n    // }\n    // else{\n    //     cfg.opacityArea=0.35\n    // }\n\n    var fieldNames= [\"GDP per capita\",\"Social support\",\"Healthy life expectancy\",\"Freedom to make life choices\",\"Generosity\",\n    \"Perceptions of corruption\",\"Percentage\",\"percentage_non_religious\"]\n\n    // //Put all of the options into a variable called cfg\n    // if('undefined' !== typeof options){\n    //   for(var i in options){\n    //     if('undefined' !== typeof options[i]){ cfg[i] = options[i]; }\n    //   }\n    // }\n  \n    // If fields specified, filter and sort data to fields\n    if (cfg.fields != false){\n        radialData = subsetAndSortData(radialData, cfg.fields);\n    } else {\n      cfg.fields = fieldNames;\n    }\n  \n    // Auto-generate scales and axes from given data extents or use given ones.\n    var autos;\n    if (cfg.scalesAndAxes === false){\n      autos = autoScalesAxes(radialData);\n    } else {\n      autos = cfg.scalesAndAxes;\n    }\n    var scales = cfg.fields.map(function(k){ return autos[k].scale; });\n    var axes = cfg.fields.map(function(k){ return autos[k].axis; });\n  \n    // Rearrange data to an array of arrays\n    radialData = radialData.map(function(row){\n      var newRow = cfg.fields.map(function(key) {\n          return {\"axis\": key, \"value\": row[key]};\n      });\n      return newRow;\n    });\n  \n    var total = cfg.fields.length,            //The number of different axes\n      radius = Math.min(cfg.w/2, cfg.h/2),    //Radius of the outermost circle\n      angleSlice = Math.PI * 2 / total;       //The width in radians of each \"slice\"\n  \n    // Update ranges of scales to match radius.\n    scales = scales.map(function(i){\n      // This is gross - no other way to get ordinal scales to behave correctly.\n      if (typeof i.rangePoints !== 'undefined'){\n          return i.rangePoints([0, radius]);\n      } else {\n          return i.range([0, radius]);\n      }\n    });\n  \n    /////////////////////////////////////////////////////////\n    //////////// Create the container SVG and g /////////////\n    /////////////////////////////////////////////////////////\n  \n    //Remove whatever chart with the same id/class was present before\n    // if (document.getElementById(\"radarplot\")) {\n    //     console.log('radar plot present')\n    //     document.getElementById(\"radarplot\").remove()\n    // }\n    // d3.select('radarplot').select(\"svg\").remove();\n\n    \n    //Initiate the radar chart SVG\n    var svg1 = d3.select(svgRef.current)\n    //   .attr(\"width\",  680)\n    //   .attr(\"height\", 700)\n      .attr(\"class\", \"radar\")\n      .attr('id','radarplot');\n  \n    //Append a g element\n    var g = svg1.append(\"g\")\n    .attr(\"transform\", \"translate(\" + (cfg.w/2 + cfg.margin.left) + \",\" + (cfg.h/2 + cfg.margin.top) + \")\");\n  \n    /////////////////////////////////////////////////////////\n    //////////////////// Draw the axes //////////////////////\n    /////////////////////////////////////////////////////////\n  \n    //Wrapper for the grid & axes\n    var axisGrid = g.append(\"g\").attr(\"class\", \"axisWrapper\");\n  \n    //Create the straight lines radiating outward from the center\n    var axis = axisGrid.selectAll(\".axis\")\n      .data(cfg.fields)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"axis\");\n  \n    //Append the axes\n    var axisGroup = axis.append(\"g\")\n      .attr(\"transform\", function(d, i){ return \"rotate(\" + (180 / Math.PI * (i * angleSlice) + 270) + \")\"; })\n      .each(function(d, i){\n        var ax = axes[i];\n        if (cfg.tickLabels !== true){\n          ax = ax.tickFormat(function(d){ return \"\"; });\n        }\n        ax(d3.select(this));\n      });\n  \n    //Append axis category labels\n    if (cfg.axisLabels === true){\n        axisGroup.append(\"text\")\n        .attr(\"class\", \"legend\")\n        .style(\"font-size\", \"11px\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"transform\", \"translate(\" + radius * cfg.labelFactor + \", 20)\")\n        .attr(\"dy\", \"0.35em\")\n        .text(function(d){return d;})\n        .call(wrap, cfg.wrapWidth);\n    }\n  \n    /////////////////////////////////////////////////////////\n    ///////////// Draw the radar chart blobs ////////////////\n    /////////////////////////////////////////////////////////\n  \n  \n    //The radial line function\n    var radarLine = d3.lineRadial()\n        .curve(d3.curveLinear)\n        .radius(function(d, i) { return scales[i](d.value); })\n      .angle(function(d,i) {  return i*angleSlice; });\n  \n    if(cfg.roundStrokes) {\n      radarLine.interpolate(\"cardinal-closed\");\n    }\n  \n    //Create a wrapper for the blobs\n    var blobWrapper = g.selectAll(\".radarWrapper\")\n      .data(radialData)\n      .enter().append(\"g\")\n      .attr(\"class\", \"radarWrapper\");\n  \n    //Append the backgrounds\n    blobWrapper\n      .append(\"path\")\n      .attr(\"class\", \"radarArea\")\n      .attr(\"d\", function(d,i) { return radarLine(d); })\n      .style(\"fill\", function(d,i) { \n        //   console.log()\n          return cfg.color(i); })\n      .style(\"fill-opacity\", cfg.opacityArea)\n      .on('mouseover', function (d,i){\n        if (cfg.hover === true){\n          //Dim all blobs\n          d3.selectAll(\".radarArea\")\n            .transition().duration(200)\n            .style(\"fill-opacity\", 0.01);\n          //Bring back the hovered over blob\n          d3.select(this)\n            .transition().duration(200)\n            .style(\"fill-opacity\", 0.7);\n        }\n      })\n      .on('mouseout', function(){\n        if (cfg.hover === true){\n          //Bring back all blobs\n          d3.selectAll(\".radarArea\")\n            .transition().duration(200)\n            .style(\"fill-opacity\", cfg.opacityArea);\n        }\n      });\n  \n    //Create the outlines\n    blobWrapper.append(\"path\")\n      .attr(\"class\", \"radarStroke\")\n      .attr(\"d\", function(d,i) { return radarLine(d); })\n      .style(\"stroke-width\", cfg.strokeWidth + \"px\")\n      .style(\"stroke\", function(d,i) { return cfg.color(i); })\n      .style(\"fill\", \"none\");\n  \n    //Append the circles\n    blobWrapper.selectAll(\".radarCircle\")\n      .data(function(d,i) { return d; })\n      .enter().append(\"circle\")\n      .attr(\"class\", \"radarCircle\")\n      .attr(\"r\", cfg.dotRadius)\n      .attr(\"cx\", function(d,i){ return scales[i](d.value) * Math.cos(angleSlice*i - Math.PI/2); })\n      .attr(\"cy\", function(d,i){ return scales[i](d.value) * Math.sin(angleSlice*i - Math.PI/2); })\n      .style(\"fill\", function(d,i,j) { return cfg.color(j); })\n      .style(\"fill-opacity\", 0.8);\n  \n    /////////////////////////////////////////////////////////\n    //////// Append invisible circles for tooltip ///////////\n    /////////////////////////////////////////////////////////\n  \n    if (cfg.hover === true){\n  \n      //Wrapper for the invisible circles on top\n      var blobCircleWrapper = g.selectAll(\".radarCircleWrapper\")\n        .data(radialData)\n        .enter().append(\"g\")\n        .attr(\"class\", \"radarCircleWrapper\");\n  \n      //Append a set of invisible circles on top for the mouseover pop-up\n      blobCircleWrapper.selectAll(\".radarInvisibleCircle\")\n        .data(function(d,i) { return d; })\n        .enter().append(\"circle\")\n        .attr(\"class\", \"radarInvisibleCircle\")\n        .attr(\"r\", cfg.dotRadius*1.5)\n        .attr(\"cx\", function(d,i){ return scales[i](d.value) * Math.cos(angleSlice*i - Math.PI/2); })\n        .attr(\"cy\", function(d,i){ return scales[i](d.value) * Math.sin(angleSlice*i - Math.PI/2); })\n        .style(\"fill\", \"none\")\n        .style(\"pointer-events\", \"all\")\n        .on(\"mouseover\", function(d,i) {\n          var newX =  parseFloat(d3.select(this).attr('cx')) - 10;\n        var newY =  parseFloat(d3.select(this).attr('cy')) - 10;\n  \n          tooltip\n            .attr('x', newX)\n            .attr('y', newY)\n            .text(function(x){return d.value;})\n            .transition().duration(200)\n            .style('opacity', 1);\n        })\n        .on(\"mouseout\", function(){\n          tooltip.transition().duration(200)\n            .style(\"opacity\", 0);\n        });\n  \n      //Set up the small tooltip for when you hover over a circle\n      var tooltip = g.append(\"text\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 0);\n  }\n  \n    /////////////////////////////////////////////////////////\n    /////////////////// Helper Function /////////////////////\n    /////////////////////////////////////////////////////////\n  \n    //Taken from http://bl.ocks.org/mbostock/7555321\n    //Wraps SVG text\n    function wrap(text, width) {\n      text.each(function() {\n        var text = d3.select(this),\n          words = text.text().split(/\\s+/).reverse(),\n          word,\n          line = [],\n          lineNumber = 0,\n          lineHeight = 1.4, // ems\n          y = text.attr(\"y\"),\n          x = text.attr(\"x\"),\n          dy = parseFloat(text.attr(\"dy\")),\n          tspan = text.text(null).append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n  \n        while (word = words.pop()) {\n          line.push(word);\n          tspan.text(line.join(\" \"));\n          if (tspan.node().getComputedTextLength() > width) {\n            line.pop();\n            tspan.text(line.join(\" \"));\n            line = [word];\n            tspan = text.append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n          }\n        }\n      });\n    }//wrap\n  \n  //RadarChart\n  \n  \n  /*\n   * Given a dataset which is an array of objects (that all have the same\n   * fields), filter and sort those fields\n   *\n   */\n  function subsetAndSortData(data, fields){\n    data = data.map(function(row){\n      var newRow = {};\n      fields.map(function(key) {\n        newRow[key] = row[key];\n      });\n      return newRow;\n    });\n    return data;\n  }\n  \n  function autoScalesAxes(data){\n  \n    var ret = {};\n    // var fieldNames = Object.keys(data[0]);\n    // console.log(fieldNames)\n\n    fieldNames.map(function(i){\n  \n      // Get all data for axis\n      var axisData = data.map(function(row){\n        // console.log(row[i])\n        return row[i];\n      });\n  \n      var scale;\n      var axis;\n  \n      // Autogenerate a scale\n      if ((typeof axisData[0] === \"string\") || (typeof axisData[0] === \"boolean\")){\n  \n        // Non-numeric things get an ordinal scale\n        var uniqueValues = d3.map(data, function(a){return a[i]; }).keys();\n        uniqueValues.unshift(\"  \"); // Padding, so it doesn't start from the center\n  \n        scale = d3.scaleOrdinal()\n          .domain(uniqueValues);\n  \n        axis = d3.axisBottom(scale)\n          .tickValues(uniqueValues)\n  \n      } else {\n  \n          // Numeric values get a linear scale\n        var extent = d3.extent(data, function(a){\n            return a[i];\n        });\n        \n        console.log(extent)\n        scale = d3.scaleLinear()\n          .domain(extent);\n  \n        axis = d3.axisBottom(scale)\n          .tickFormat(function(d, i){ \n              if(i != 0){\n                  return d + \"\";\n                } else {\n                    return \"\";\n                }\n              })\n  \n      }\n  \n      ret[i] = {};\n      ret[i].scale = scale;\n      ret[i].axis = axis;\n  \n    });\n    return ret;\n  \n  }\n},[])\nreturn(\n    <svg style={{ height: \"100%\", width: \"100%\" }} className='radar' ref={svgRef}></svg>\n    )\n}",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":12,"column":8,"nodeType":"51","messageId":"52","endLine":12,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":168,"column":13,"nodeType":"55","endLine":191,"endColumn":4},{"ruleId":"53","severity":1,"message":"54","line":17,"column":13,"nodeType":"55","endLine":20,"endColumn":4},{"ruleId":"49","severity":1,"message":"56","line":207,"column":13,"nodeType":"51","messageId":"52","endLine":207,"endColumn":20},{"ruleId":"53","severity":1,"message":"54","line":35,"column":15,"nodeType":"55","endLine":412,"endColumn":2},{"ruleId":"57","severity":1,"message":"58","line":89,"column":20,"nodeType":"59","messageId":"60","endLine":89,"endColumn":22},{"ruleId":"53","severity":1,"message":"61","line":106,"column":18,"nodeType":"62","endLine":111,"endColumn":7},{"ruleId":"63","severity":1,"message":"64","line":320,"column":16,"nodeType":"65","messageId":"66","endLine":320,"endColumn":34},{"ruleId":"67","severity":1,"message":"68","line":344,"column":18,"nodeType":"69","messageId":"70","endLine":344,"endColumn":26},{"ruleId":"67","severity":1,"message":"68","line":358,"column":20,"nodeType":"69","messageId":"70","endLine":358,"endColumn":28},{"ruleId":"57","severity":1,"message":"58","line":395,"column":20,"nodeType":"59","messageId":"60","endLine":395,"endColumn":22},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'FormHelperText' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'country' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Assignments to the 'radialData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]