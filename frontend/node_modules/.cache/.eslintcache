[{"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/index.js":"1","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/reportWebVitals.js":"2","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/App.js":"3","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/CountryMap.js":"4","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/scatterplot.js":"5","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/pcp.js":"6","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/scatterPlot1.js":"7","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/radarChartN.js":"8","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/d3-tip-example.js":"9","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/Piechart.js":"10"},{"size":500,"mtime":1620693420839,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1620693420839,"results":"13","hashOfConfig":"12"},{"size":11034,"mtime":1620948842159,"results":"14","hashOfConfig":"12"},{"size":6239,"mtime":1620932933087,"results":"15","hashOfConfig":"12"},{"size":6308,"mtime":1620914368511,"results":"16","hashOfConfig":"12"},{"size":8811,"mtime":1620944580900,"results":"17","hashOfConfig":"12"},{"size":6982,"mtime":1620939444181,"results":"18","hashOfConfig":"12"},{"size":14390,"mtime":1620940113837,"results":"19","hashOfConfig":"12"},{"size":8303,"mtime":1620693610682,"results":"20","hashOfConfig":"12"},{"size":3235,"mtime":1620948962559,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"znx07f",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/index.js",[],["47","48"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/reportWebVitals.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/App.js",["49","50","51","52"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/CountryMap.js",["53","54","55","56"],"import React, { useRef, useEffect } from \"react\"\n// import * as d3Module from \"d3\"\nimport d3 from \"./d3-tip-example\"\nimport * as topojson from \"topojson\"\nimport data from './world_countries.json'\n// import * as d3legend from \"./d3-legend\";\nimport { event, zoom as zoomM } from 'd3'\nconst format = d3.format(\",\")\n\n// const d3 = {\n//   ...d3Module,\n\n// }\nexport default function CountryMap({ mapData, colorMap, feature, setRadialCountry }) {\n  const svgRef = useRef()\n\n  useEffect(async () => {\n\n    displayMap(mapData, colorMap, feature)\n  }, [mapData, colorMap, feature])\n\n\n\n  // d3.select(\"#menu\").on(\"change\", function(){\n  //     selected_feature=d3.select(\"#menu\").property(\"value\");\n  //     // console.log(selected_feature)\n  //     displayMap(selected_feature) })\n\n\n\n  async function displayMap(mapData, colorMap, feature) {\n\n    const tip = d3.tip()\n      .attr('class', 'd3-tip')\n      .offset([-10, 0])\n      .html(function (d, name) {\n        return `<strong>Country: </strong><span class='details'> ${d.properties.name} <br></span><strong>${name}: </strong><span class='details'> ${format(d[name])}</span>`;\n      })\n\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 }\n    const width = 800 - margin.left - margin.right\n    const height = 500 - margin.top - margin.bottom\n\n    const color = d3.scaleThreshold()\n      .domain([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n      .range([\"rgb(247,251,255)\", \"rgb(222,235,247)\", \"rgb(198,219,239)\", \"rgb(158,202,225)\", \"rgb(107,174,214)\", \"rgb(66,146,198)\", \"rgb(33,113,181)\", \"rgb(8,81,156)\", \"rgb(8,48,107)\", \"rgb(3,19,43)\"])\n\n\n\n    // var options = [\"Score\", \"Overall rank\", \"GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\",\n    //   \"Perceptions of corruption\", \"Population\", \"Percentage\", \"percentage_non_religious\"]\n    const svg = d3.select(svgRef.current)\n\n\n    svg.selectAll(\"*\").remove();\n\n    svg.attr('class', 'map')\n      .attr('id', 'worldmap')\n      .append('g')\n\n    // const width = +svg.attr('width')\n    // const height = +svg.attr('height')\n\n\n\n    // d3.select('.list')\n    //   .selectAll('myOptions')\n    //   .data(options)\n    //   .enter()\n    //   .append('option')\n    //   .text(function (d) { return d; }) // text showed in the menu\n    //   .attr(\"value\", function (d) { return d; })\n\n    const projection = d3.geoMercator()\n      .scale(82)\n      .translate([width / 2.5, 230])\n\n    const path = d3.geoPath()\n      .projection(projection)\n\n    svg.call(tip)\n\n    var optionByCountry = {};\n    var colorVal = {};\n\n    console.log('percentage', mapData)\n\n    mapData.forEach(function (d) {\n      if (feature == 'Percentage') {\n        optionByCountry[d.iso] = d[feature];\n      }\n      else\n        optionByCountry[d.iso] = +d[feature];\n    });\n\n    // var max=0\n    // function getMaxVal() {\n    //   return mapData.reduce((max, p) => +p[feature] > max ? +p[feature]: max, mapData[0][feature]);\n    // }\n    // var maxVal=getMaxVal()\n\n    // var min=-2\n    // function getMinVal() {\n    //   return mapData.reduce((min, p) => +p[feature] < min ? +p[feature]: min, mapData[0][feature]);\n    // }\n    // var minVal=getMinVal()\n\n    // var range=(maxVal/10)\n\n    // var i;\n    // var label=[]\n    // var xmin=minVal\n    // range=range.toFixed(2)\n    // for (i = 0; i < 10; i++) { \n    //   xmin=Number(xmin).toFixed(2)\n    //   var newrange=(Number(xmin)+Number(range)).toFixed(2)\n    //   label[i]=((xmin).toString())+\"-\"+(newrange.toString());\n    //   xmin=newrange\n    // }\n\n    // if(document.getElementById(\"legend\"))\n    // document.getElementById(\"legend\").remove();\n\n    // //adding legend\n    // var g = svg.append(\"g\")\n    // .attr(\"class\", \"legendThreshold\")\n    // .attr(\"transform\", \"translate(5,320)\");\n    // g.append(\"text\")\n    // .attr(\"class\", \"caption\")\n    // .attr(\"id\",\"legend\")\n    // .attr(\"x\", 0)\n    // .attr(\"y\", -10)\n    // .text(function (d){\n    //   return feature;\n    // });\n\n    // var legend = d3.legendColor()\n    // .labels(function (d) { return label[d.i]; })\n    // .shapePadding(4)\n    // .scale(color);\n    // svg.select(\".legendThreshold\")\n    // .call(legend);\n\n    colorMap.forEach(function (d) {\n      colorVal[d.iso] = d[feature + \"_scaled\"];\n    });\n\n    // console.log(colorVal)\n    data.features.forEach(function (d) { d[feature] = optionByCountry[d.id] });\n    svg.append(\"g\")\n      .attr(\"class\", \"countries\")\n      .style('overflow', 'auto')\n      .selectAll(\"path\")\n      .data(data.features)\n      .enter().append(\"path\")\n      .attr(\"d\", path)\n      .style(\"fill\", function (d) {\n        return color(colorVal[d.id]);\n      })\n      .style('stroke', 'white')\n      .style('stroke-width', 1.5)\n      .style(\"opacity\", 0.8)\n      // tooltips\n      .style(\"stroke\", \"white\")\n      .style('stroke-width', 0.3)\n      .on('mouseover', function (d) {\n\n        tip.show(d, feature);\n        d3.select(this)\n          .style(\"opacity\", 1)\n          .style(\"stroke\", \"white\")\n          .style(\"stroke-width\", 3)\n      })\n      .on('mouseout', function (d) {\n        tip.hide(d, feature);\n\n        d3.select(this)\n          .style(\"opacity\", 0.8)\n          .style(\"stroke\", \"white\")\n          .style(\"stroke-width\", 0.3);\n      })\n      .on('click', function (d) {\n        console.log(d.properties.name);\n        var country = d.properties.name;\n        setRadialCountry(country)\n        // drawBarChart(d.properties.name)\n        // drawRadarPlot(d.properties.name); //print selected country name\n      });\n\n    svg.append(\"path\")\n      .data(topojson.mesh(data.features, function (a, b) { return a.id !== b.id; }))\n      .attr(\"class\", \"names\")\n      .attr(\"d\", path);\n\n    let zoom = zoomM()\n      .scaleExtent([1, 1.25])\n      .translateExtent([[-220, -50], [880, 420]])\n      .on('zoom', () => {\n        // console.log('hello dere', +svg.attr('height'));\n        // var g= d3.select(this)\n        // svg.selectAll('paths')\n        // svg.selectAll('g')\n        svg.attr('transform', event.transform)\n      });\n    svg.call(zoom);\n  }\n  return (\n    <div style={{ height: \"100%\", width: \"100%\", overflow: \"visible\" }}>\n      <svg style={{ height: \"100%\", width: \"100%\" }} className='svgcontainer' id='svg' ref={svgRef}>\n      </svg>\n    </div>\n  )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/scatterplot.js",["57","58","59","60","61","62","63","64"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3Module from \"d3\"\nimport {event} from 'd3'\n\n\nconst d3 = {\n    ...d3Module\n}\n\n\nexport default function ScatterPlot({data, feature}) {\n\n\n    console.log(\"data scatter :\", data)\n    const svgRef = useRef()\n\n    useEffect(async () => {\n\n    var color= d3.scaleOrdinal(d3.schemeCategory10)\n        \n    var xdata = [];\n    for (var i=0; i<data.length ; i++){\n        if ((data[i][feature] ==0 || (data[i][feature] == null )) ||  (data[i]['Percentage']==0 || (data[i]['Percentage'] == null ))){\n            continue\n        }\n        else{\n            xdata[i] = data[i]['Percentage']\n        }\n        \n    }\n\n    var ydata = [];\n    for (var j=0; j<data.length ; j++){\n        if ((data[j][feature] ==0 || (data[j][feature] == null )) ||  (data[j]['Percentage']==0 || (data[j]['Percentage'] == null ))){\n            continue\n        }\n        else{\n            if (feature == 'Population')\n                ydata[j] = data[j][feature]/100000\n            else{\n                ydata[j] = data[j][feature]\n            }\n        }\n    }\n\n    var svg = d3.select(svgRef.current)\n        .attr(\"id\",\"scattersvg\")\n        .attr(\"class\",\"scatter\")\n\n    svg.selectAll(\"*\").remove();\n    //    var margin = 200,\n        var width = 220,\n         height = 230;\n\n     \n    var x = d3.scaleLinear().range([0, width]);\n    var y = d3.scaleLinear().range([height, 0]);\n    var g = svg.append(\"g\")\n    .attr(\"transform\", \"translate(\" + 80 + \",\" + 5 + \")\");\n\n    var xmin = d3.min(xdata);\n    var xmax = d3.max(xdata);\n    x.domain([xmin-0.15, xmax]);\n\n    var xAxis = g.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x))\n          .attr(\"font-size\",\"11px\")\n\n    g.append(\"g\")\n    .append(\"text\")\n    // .attr(\"transform\", \"translate(0, 0)\")\n     .attr(\"y\", 275)\n     .attr(\"x\", width/2)\n     .attr(\"text-anchor\", \"middle\")\n     .attr(\"fill\", \"black\")\n     .attr(\"font-family\", \"sans-serif\")\n     .attr(\"font-size\", \"12px\")\n     .text(\"Internet users(%)\")\n     .attr('font-weight','bold');\n\n      var ymin = d3.min(ydata)\n      var ymax = d3.max(ydata)\n      y.domain([0, ymax]);\n\n      g.append(\"g\")\n          .call(d3.axisLeft(y).tickFormat(function(d){\n              return d;\n          }).ticks(10))\n          .attr(\"font-size\",\"11px\")\n\n      g.append(\"g\")\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 30)\n        .attr(\"x\", -150)\n        .attr(\"dy\", \"-5.1em\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"fill\", \"black\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"12px\")\n        .text(feature)\n        .attr('font-weight','bold');\n\n\n     g.append(\"g\")\n         .call(d3.axisLeft(y).tickFormat(\"\").ticks(10).tickSizeInner(-width))\n         .attr(\"class\", \"grid\");\n      \n    var clip = g.append(\"defs\").append(\"svg:clipPath\")\n         .attr(\"id\", \"clip1\")\n         .append(\"svg:rect\")\n         .attr(\"width\", 230 )\n         .attr(\"height\", 500 )\n         .attr(\"x\", -1)\n         .attr(\"y\", -10);\n\n        //  var scatter = g.append('g')\n    var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n        .extent( [ [0,0], [width,height] ] ) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n        .on(\"end\", updateChart) \n\n      var scatter = g.append('g')\n        .attr(\"clip-path\", \"url(#clip1)\")\n\n    scatter\n        .selectAll(\"circle\")\n        .data(xdata)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", function (d,i) { return x(xdata[i]); } )\n        .attr(\"cy\", function (d,i) { return y(ydata[i]); } )\n        .attr(\"r\", 4)\n        .style(\"fill\", function(d,i){\n            // console.log(color[jsdata[\"clusterId\"][i]]+\"---\"+jsdata[\"clusterId\"][i])\n              return color(data[i]['clusterId']);\n          })\n        .style(\"opacity\", 0.7);\n\n            // Add the brushing\n    scatter\n        .append(\"g\")\n          .attr(\"class\", \"brush\")\n          .call(brush);\n  \n    \n    // A function that set idleTimeOut to null\n    var idleTimeout\n    function idled() { idleTimeout = null; }\n  \n    // A function that update the chart for given boundaries\n    function updateChart() {\n\n    var extent = event.selection\n\n\n    // If no selection, back to initial coordinate. Otherwise, update X axis domain\n    if(!extent){\n        if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n        x.domain([ xmin-0.15, xmax])\n        }else{\n            x.domain([ x.invert(extent[0]), x.invert(extent[1]) ])\n            scatter.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n    }\n\n    // Update axis and circle position\n    xAxis.transition().duration(1000).call(d3.axisBottom(x))\n    scatter\n        .selectAll(\"circle\")\n        .transition().duration(1000)\n        .attr(\"cx\", function (d,i) { return x(xdata[i]); } )\n        .attr(\"cy\", function (d,i) { return y(ydata[i]); } )\n\n    }    \n    var keys = [\"Cluster 0\", \"Cluster 1\", \"Cluster 2\"]\n        \n        //   Add one dot in the legend for each name.\n    g.selectAll(\"mydots\")\n    .data(keys)\n    .enter()\n    .append(\"circle\")\n        .attr(\"cx\", -77)\n        .attr(\"cy\", function(d,i){ return 0 + i*16}) // 100 is where the first dot appears. 25 is the distance between dots\n        .attr(\"r\", 3)\n        .style(\"fill\", function(d, i){ \n        const index = keys.findIndex(dim => dim === d);\n        // console.log('color log', index )\n        return color(index)\n    })\n          \n          // Add one dot in the legend for each name.\n    g.selectAll(\"mylabels\")\n    .data(keys)\n    .enter()\n    .append(\"text\")\n        .attr(\"x\", -74)\n        .attr(\"y\", function(d,i){ return 0 + i*16}) // 100 is where the first dot appears. 25 is the distance between dots\n        .style(\"fill\", \"black\")\n        .text(function(d){ return d})\n        .attr(\"text-anchor\", \"left\")\n        .style(\"alignment-baseline\", \"middle\")\n        .style(\"font-size\",\"11px\")\n        .attr('font-weight','bold');\n\n\n\n\n    },[data, feature])\n    return(\n        <svg style={{ height: \"100%\", width: \"100%\" }} className='scatter' id='scatterid' ref={svgRef}></svg>\n    )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/pcp.js",["65","66","67","68","69"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/scatterPlot1.js",["70","71","72","73","74","75"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3Module from \"d3\"\nimport { event } from 'd3'\n\n\nconst d3 = {\n    ...d3Module\n}\n\n\nexport default function ScatterPlot1({ data, feature }) {\n\n\n    console.log(\"data scatter :\", data)\n    const svgRef = useRef()\n\n    useEffect(async () => {\n\n        var color = d3.scaleOrdinal(d3.schemeCategory10)\n\n        var xdata = [];\n        for (var i = 0; i < data.length; i++) {\n            if ((data[i]['percentage_non_religious'] == 0 || (data[i]['percentage_non_religious'] == null))) {\n                continue\n            }\n            else {\n                xdata[i] = data[i]['percentage_non_religious']\n            }\n\n        }\n\n        var ydata = [];\n        for (var j = 0; j < data.length; j++) {\n            if ((data[j]['percentage_non_religious'] == 0 || (data[j]['percentage_non_religious'] == null))) {\n                continue\n            }\n            else {\n                if (feature == 'Population')\n                    ydata[j] = data[j][feature] / 100000\n                else {\n                    ydata[j] = data[j][feature]\n                }\n            }\n        }\n\n        var svg = d3.select(svgRef.current)\n            .attr(\"id\", \"scattersvg\")\n            .attr(\"class\", \"scatter\")\n\n        svg.selectAll(\"*\").remove();\n        //    var margin = 200,\n        var width = 220,\n            height = 230;\n\n\n        var x = d3.scaleLinear().range([0, width]);\n        var y = d3.scaleLinear().range([height, 0]);\n        var g = svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + 80 + \",\" + 40 + \")\");\n\n        var xmin = d3.min(xdata);\n        var xmax = d3.max(xdata);\n        // x.domain([0,width])\n        x.domain([xmin - 0.15, xmax]);\n\n        var xAxis = g.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n        //   .attr(\"font-size\",\"11px\")\n\n        g.append(\"g\")\n            .append(\"text\")\n            // .attr(\"transform\", \"translate(0, 0)\")\n            .attr(\"y\", 275)\n            .attr(\"x\", width / 2)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"fill\", \"black\")\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", \"12px\")\n            .text(\"Non-religious people(%)\")\n            .attr('font-weight', 'bold');\n\n\n        var ymin = d3.min(ydata)\n        var ymax = d3.max(ydata)\n        y.domain([0, ymax]);\n\n        g.append(\"g\")\n            .call(d3.axisLeft(y).tickFormat(function (d) {\n                return d;\n            }).ticks(10))\n            .attr(\"font-size\", \"11px\")\n\n        g.append(\"g\")\n            .append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 30)\n            .attr(\"x\", -150)\n            .attr(\"dy\", \"-5.1em\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"fill\", \"black\")\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", \"12px\")\n            .text(feature)\n            .attr('font-weight', 'bold');\n\n\n        g.append(\"g\")\n            .call(d3.axisLeft(y).tickFormat(\"\").ticks(10).tickSizeInner(-width))\n            .attr(\"class\", \"grid\");\n\n        var clip = g.append(\"defs\").append(\"svg:clipPath\")\n            .attr(\"id\", \"clip\")\n            .append(\"svg:rect\")\n            .attr(\"width\", 230)\n            .attr(\"height\", 500)\n            .attr(\"x\", -1)\n            .attr(\"y\", -10);\n\n        //  var scatter = g.append('g')\n        var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n            .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n            .on(\"end\", updateChart)\n\n        var scatter = g.append('g')\n            .attr(\"clip-path\", \"url(#clip)\")\n\n        scatter\n            .selectAll(\"circle\")\n            .data(xdata)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", function (d, i) { return x(xdata[i]); })\n            .attr(\"cy\", function (d, i) { return y(ydata[i]); })\n            .attr(\"r\", 4)\n            .style(\"fill\", (d, i) => {\n                return color(data[i]['clusterId']);\n            })\n            .style(\"opacity\", 0.7);\n\n        // Add the brushing\n        scatter\n            .append(\"g\")\n            .attr(\"class\", \"brush\")\n            .call(brush);\n\n\n        // A function that set idleTimeOut to null\n        var idleTimeout\n        function idled() { idleTimeout = null; }\n\n        // A function that update the chart for given boundaries\n        function updateChart() {\n\n            var extent = event.selection\n\n\n            // If no selection, back to initial coordinate. Otherwise, update X axis domain\n            if (!extent) {\n                if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n                x.domain([xmin - 0.15, xmax]);\n            } else {\n                // console.log('extent',x.invert(extent[0]), x.invert(extent[1]) )\n                x.domain([x.invert(extent[0]), x.invert(extent[1])])\n                scatter.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n            }\n\n            // Update axis and circle position\n            xAxis\n                .transition().duration(1000).call(d3.axisBottom(x))\n\n\n            scatter\n                .selectAll(\"circle\")\n                .transition().duration(1000)\n                .attr(\"cx\", function (d, i) { return x(xdata[i]); })\n                .attr(\"cy\", function (d, i) { return y(ydata[i]); })\n\n        }\n\n\n        var keys = [\"Cluster 0\", \"Cluster 1\", \"Cluster 2\"]\n\n        //   Add one dot in the legend for each name.\n        g.selectAll(\"mydots\")\n            .data(keys)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", -77)\n            .attr(\"cy\", function (d, i) { return 0 + i * 16 }) // 100 is where the first dot appears. 25 is the distance between dots\n            .attr(\"r\", 3)\n            .style(\"fill\", function (d, i) {\n                const index = keys.findIndex(dim => dim === d);\n                console.log('color log', index)\n                return color(index)\n            })\n\n        // Add one dot in the legend for each name.\n        g.selectAll(\"mylabels\")\n            .data(keys)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", -74)\n            .attr(\"y\", function (d, i) { return 0 + i * 16 }) // 100 is where the first dot appears. 25 is the distance between dots\n            .style(\"fill\", \"black\")\n            .text(function (d) { return d })\n            .attr(\"text-anchor\", \"left\")\n            .style(\"alignment-baseline\", \"middle\")\n            .style(\"font-size\", \"11px\")\n            .attr('font-weight', 'bold');\n\n\n    }, [data, feature])\n    return (\n        <svg style={{ height: \"100%\", width: \"100%\" }} className='scatter' id='scatterid' ref={svgRef}></svg>\n    )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/radarChartN.js",["76","77","78","79","80","81","82","83","84","85"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3Module from \"d3\"\n\nconst d3 = {\n  ...d3Module\n}\n\n// async function drawRadarPlot(country){\n\n//     chart_url=radar_url;\n//     console.log(chart_url);\n//     var bar_data=await getJson(chart_url);\n\n//     console.log(country)\n\n//     if (country !== 'undefined'){\n//         RadarChart(bar_data, country);\n//     }\n//     else{\n//         console.log('inside draw radar');\n//         RadarChart(bar_data);\n//     }\n\n\nexport default function RadialChart({ radialData, radialCountry }) {\n\n\n  console.log('Radial data: ', radialCountry);\n  const svgRef = useRef()\n\n  useEffect(async () => {\n\n    var cfg = {\n      w: 300, //Width of the circle\n      h: 300, //Height of the circle\n      margin: { top: 20, right: 20, bottom: 20, left: 20 }, //The margins of the SVG\n      labelFactor: 0.5,  //How much farther than the radius of the outer circle should the labels be placed\n      wrapWidth: 60,      //The number of pixels after which a label needs to be given a new line\n      opacityArea: 0.35,  //The opacity of the area of the blob\n      dotRadius: 4,       //The size of the colored circles of each blog\n      opacityCircles: 0.1,//The opacity of the circles of each blob\n      strokeWidth: 0.7,   //The width of the stroke around each blob\n      roundStrokes: false,//If true the area and stroke will follow a round path (cardinal-closed)\n      color: d3.scaleOrdinal(d3.schemeCategory10),  //Color function\n      hover: true,\n      axisLabels: true,\n      tickLabels: true,\n      fields: false,\n      scalesAndAxes: false,\n    };\n\n\n    // console.log(\"country data : \",countryData)\n\n    // function userExists(countryName) {\n    //     return data.some(function(el) {\n    //         if (el.country === countryName){\n    //             console.log('----')\n    //             console.log([el])\n    //             data=[el]\n    //         }\n    // }); \n    // }\n    // // \n    // userExists(radialCountry)\n    // console.log('-----')\n    // console.log(radialCountry)\n    // if (radialCountry !== ''){\n    //     cfg.opacityArea=0.01\n    // }\n    // else{\n    //     cfg.opacityArea=0.35\n    // }\n\n    var fieldNames = [\"GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\",\n      \"Perceptions of corruption\", \"Percentage\", \"percentage_non_religious\"]\n\n    var countryArr = []\n\n    var updatedDimensions = ['GDP', 'Social', 'Health', 'Freedom', 'Generosity', 'Corruption', 'Internet users', 'Non-religious']\n\n    var index = []\n    for (var i = 0; i < fieldNames.length; i++) {\n      index[fieldNames[i]] = i;\n    }\n    // //Put all of the options into a variable called cfg\n    // if('undefined' !== typeof options){\n    //   for(var i in options){\n    //     if('undefined' !== typeof options[i]){ cfg[i] = options[i]; }\n    //   }\n    // }\n\n    // If fields specified, filter and sort data to fields\n    if (cfg.fields != false) {\n      radialData = subsetAndSortData(radialData, cfg.fields);\n    } else {\n      cfg.fields = fieldNames;\n    }\n\n    // Auto-generate scales and axes from given data extents or use given ones.\n    var autos;\n    if (cfg.scalesAndAxes === false) {\n      autos = autoScalesAxes(radialData);\n    } else {\n      autos = cfg.scalesAndAxes;\n    }\n    var scales = cfg.fields.map(function (k) { return autos[k].scale; });\n    var axes = cfg.fields.map(function (k) { return autos[k].axis; });\n\n    // Rearrange data to an array of arrays\n\n    radialData = radialData.map(function (row) {\n      countryArr.push(row.country)\n      var newRow = cfg.fields.map(function (key) {\n        //   console.log(\"key data\", updatedDimensions[index[key]])\n        return { \"axis\": key, \"value\": row[key] };\n      });\n      return newRow;\n    });\n\n    console.log('country Arr', countryArr)\n\n    var total = cfg.fields.length,            //The number of different axes\n      radius = Math.min(cfg.w / 2, cfg.h / 2),    //Radius of the outermost circle\n      // radius=150,\n      angleSlice = Math.PI * 2 / total;\n    console.log(\"Radius,\", radius)     //The width in radians of each \"slice\"\n\n    // Update ranges of scales to match radius.\n    scales = scales.map(function (i) {\n      // This is gross - no other way to get ordinal scales to behave correctly.\n      if (typeof i.rangePoints !== 'undefined') {\n        return i.rangePoints([0, radius]);\n      } else {\n        return i.range([0, radius]);\n      }\n    });\n\n    /////////////////////////////////////////////////////////\n    //////////// Create the container SVG and g /////////////\n    /////////////////////////////////////////////////////////\n\n    //Remove whatever chart with the same id/class was present before\n    // if (document.getElementById(\"radarplot\")) {\n    //     console.log('radar plot present')\n    //     document.getElementById(\"radarplot\").remove()\n    // }\n    // d3.select('radarplot').select(\"svg\").remove();\n\n\n    //Initiate the radar chart SVG\n    var svg1 = d3.select(svgRef.current)\n      //   .attr(\"width\",  680)\n      //   .attr(\"height\", 700)\n      .attr(\"class\", \"radar\")\n      .attr('id', 'radarplot');\n\n    svg1.selectAll(\"*\").remove();\n\n\n\n\n    //Append a g element\n    var g = svg1.append(\"g\")\n      .attr(\"transform\", \"translate(\" + (cfg.w / 2 + cfg.margin.left) + \",\" + (cfg.h / 2 + cfg.margin.top) + \")\");\n\n    /////////////////////////////////////////////////////////\n    //////////////////// Draw the axes //////////////////////\n    /////////////////////////////////////////////////////////\n\n    //Wrapper for the grid & axes\n    var axisGrid = g.append(\"g\").attr(\"class\", \"axisWrapper\");\n\n    //Create the straight lines radiating outward from the center\n    var axis = axisGrid.selectAll(\".axis\")\n      .data(cfg.fields)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"axis\");\n\n    //Append the axes\n    var axisGroup = axis.append(\"g\")\n      .attr(\"transform\", function (d, i) { return \"rotate(\" + (180 / Math.PI * (i * angleSlice) + 270) + \")\"; })\n      .each(function (d, i) {\n        var ax = axes[i];\n        if (cfg.tickLabels !== true) {\n          ax = ax.tickFormat(function (d) { return \"\"; });\n        }\n        ax(d3.select(this));\n      });\n\n    //Append axis category labels\n    if (cfg.axisLabels === true) {\n      axisGroup.append(\"text\")\n        .attr(\"class\", \"legend\")\n        .style(\"font-size\", \"12px\")\n        .attr(\"text-anchor\", \"start\")\n        .attr(\"transform\", \"translate(\" + radius * cfg.labelFactor + \", 20)\")\n        .attr(\"dy\", \"0.35em\")\n        .text(function (d) {\n          return updatedDimensions[index[d]];\n          // return d;\n        })\n        .call(wrap, cfg.wrapWidth)\n        .attr(\"fill\", 'black')\n    }\n\n    /////////////////////////////////////////////////////////\n    ///////////// Draw the radar chart blobs ////////////////\n    /////////////////////////////////////////////////////////\n\n\n    //The radial line function\n\n    var radialPlotData = [];\n    if (radialCountry != '') {\n      for (var i = 0; i < countryArr.length; i++) {\n        if (countryArr[i] == radialCountry) {\n          radialPlotData.push(radialData[i])\n          break;\n        }\n      }\n    } else {\n      radialPlotData = radialData\n    }\n\n\n    var radarLine = d3.lineRadial()\n      .curve(d3.curveLinear)\n      .radius(function (d, i) { return scales[i](d.value); })\n      .angle(function (d, i) { return i * angleSlice; });\n\n    if (cfg.roundStrokes) {\n      radarLine.interpolate(\"cardinal-closed\");\n    }\n\n    //Create a wrapper for the blobs\n    var blobWrapper = g.selectAll(\".radarWrapper\")\n      .data(radialPlotData)\n      .enter().append(\"g\")\n      .attr(\"class\", \"radarWrapper\");\n\n    //Append the backgrounds\n    blobWrapper\n      .append(\"path\")\n      .attr(\"class\", \"radarArea\")\n      .attr(\"d\", function (d, i) { return radarLine(d); })\n      .style(\"fill\", function (d, i) {\n        //   console.log()\n        return cfg.color(i);\n      })\n      .style(\"fill-opacity\", cfg.opacityArea)\n      .on('mouseover', function (d, i) {\n        if (cfg.hover === true) {\n          //Dim all blobs\n          d3.selectAll(\".radarArea\")\n            .transition().duration(200)\n            .style(\"fill-opacity\", 0.01);\n          //Bring back the hovered over blob\n          d3.select(this)\n            .transition().duration(200)\n            .style(\"fill-opacity\", 0.7);\n        }\n      })\n      .on('mouseout', function () {\n        if (cfg.hover === true) {\n          //Bring back all blobs\n          d3.selectAll(\".radarArea\")\n            .transition().duration(200)\n            .style(\"fill-opacity\", cfg.opacityArea);\n        }\n      });\n\n    //Create the outlines\n    blobWrapper.append(\"path\")\n      .attr(\"class\", \"radarStroke\")\n      .attr(\"d\", function (d, i) { return radarLine(d); })\n      .style(\"stroke-width\", cfg.strokeWidth + \"px\")\n      .style(\"stroke\", function (d, i) { return cfg.color(i); })\n      .style(\"fill\", \"none\");\n\n    //Append the circles\n    blobWrapper.selectAll(\".radarCircle\")\n      .data(function (d, i) { return d; })\n      .enter().append(\"circle\")\n      .attr(\"class\", \"radarCircle\")\n      .attr(\"r\", cfg.dotRadius)\n      .attr(\"cx\", function (d, i) { return scales[i](d.value) * Math.cos(angleSlice * i - Math.PI / 2); })\n      .attr(\"cy\", function (d, i) { return scales[i](d.value) * Math.sin(angleSlice * i - Math.PI / 2); })\n      .style(\"fill\", function (d, i, j) { return cfg.color(j); })\n      .style(\"fill-opacity\", 0.8);\n\n    /////////////////////////////////////////////////////////\n    //////// Append invisible circles for tooltip ///////////\n    /////////////////////////////////////////////////////////\n\n    if (cfg.hover === true) {\n\n      //Wrapper for the invisible circles on top\n      var blobCircleWrapper = g.selectAll(\".radarCircleWrapper\")\n        .data(radialData)\n        .enter().append(\"g\")\n        .attr(\"class\", \"radarCircleWrapper\");\n\n      //Append a set of invisible circles on top for the mouseover pop-up\n      blobCircleWrapper.selectAll(\".radarInvisibleCircle\")\n        .data(function (d, i) { return d; })\n        .enter().append(\"circle\")\n        .attr(\"class\", \"radarInvisibleCircle\")\n        .attr(\"r\", cfg.dotRadius * 1.5)\n        .attr(\"cx\", function (d, i) { return scales[i](d.value) * Math.cos(angleSlice * i - Math.PI / 2); })\n        .attr(\"cy\", function (d, i) { return scales[i](d.value) * Math.sin(angleSlice * i - Math.PI / 2); })\n        .style(\"fill\", \"none\")\n        .style(\"pointer-events\", \"all\")\n        .on(\"mouseover\", function (d, i) {\n          var newX = parseFloat(d3.select(this).attr('cx')) - 5;\n          var newY = parseFloat(d3.select(this).attr('cy')) - 10;\n\n          tooltip\n            .attr('x', newX)\n            .attr('y', newY)\n            .text(function (x) { return d.value; })\n            .transition().duration(200)\n            .style('opacity', 1)\n            .attr('font-weight', 'bold');\n        })\n        .on(\"mouseout\", function () {\n          tooltip.transition().duration(200)\n            .style(\"opacity\", 0);\n        });\n\n      //Set up the small tooltip for when you hover over a circle\n      var tooltip = g.append(\"text\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 0);\n    }\n\n    /////////////////////////////////////////////////////////\n    /////////////////// Helper Function /////////////////////\n    /////////////////////////////////////////////////////////\n\n    //Taken from http://bl.ocks.org/mbostock/7555321\n    //Wraps SVG text\n    function wrap(text, width) {\n      // console.log('text',text)\n\n      text.each(function () {\n        //   console.log('text',text)\n        var text = d3.select(this),\n          words = text.text().split(/\\s+/).reverse(),\n          word,\n          line = [],\n          lineNumber = 0,\n          lineHeight = 0.1, // ems\n          y = text.attr(\"y\"),\n          x = text.attr(\"x\"),\n          dy = parseFloat(text.attr(\"dy\")),\n          tspan = text.text(null).append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n\n        while (word = words.pop()) {\n          line.push(word);\n          tspan.text(line.join(\" \"));\n          if (tspan.node().getComputedTextLength() > width) {\n            line.pop();\n            tspan.text(line.join(\" \"));\n            line = [word];\n            tspan = text.append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n          }\n        }\n      });\n    }//wrap\n\n    //RadarChart\n\n\n    /*\n     * Given a dataset which is an array of objects (that all have the same\n     * fields), filter and sort those fields\n     *\n     */\n    function subsetAndSortData(data, fields) {\n      data = data.map(function (row) {\n        var newRow = {};\n        fields.map(function (key) {\n          newRow[key] = row[key];\n        });\n        return newRow;\n      });\n      return data;\n    }\n\n    function autoScalesAxes(data) {\n\n      var ret = {};\n      // var fieldNames = Object.keys(data[0]);\n      // console.log(fieldNames)\n\n      fieldNames.map(function (i) {\n\n        // Get all data for axis\n        var axisData = data.map(function (row) {\n          return row[i];\n        });\n\n        var scale;\n        var axis;\n\n        // Autogenerate a scale\n        if ((typeof axisData[0] === \"string\") || (typeof axisData[0] === \"boolean\")) {\n\n          // Non-numeric things get an ordinal scale\n          var uniqueValues = d3.map(data, function (a) { return a[i]; }).keys();\n          uniqueValues.unshift(\"  \"); // Padding, so it doesn't start from the center\n\n          scale = d3.scaleOrdinal()\n            .domain(uniqueValues);\n\n          axis = d3.axisBottom(scale)\n            .tickValues(uniqueValues)\n\n        } else {\n\n          // Numeric values get a linear scale\n          var extent = d3.extent(data, function (a) {\n            return a[i];\n          });\n\n          console.log(extent)\n          scale = d3.scaleLinear()\n            .domain(extent);\n\n          axis = d3.axisBottom(scale)\n            .tickFormat(function (d, i) {\n              if (i != 0) {\n                return d + \"\";\n              } else {\n                return \"\";\n              }\n            })\n\n        }\n\n        ret[i] = {};\n        ret[i].scale = scale;\n        ret[i].axis = axis;\n\n      });\n      return ret;\n\n    }\n  }, [radialData, radialCountry])\n  return (\n    <svg style={{ height: \"100%\", width: \"100%\" }} className='radar' ref={svgRef}></svg>\n  )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/d3-tip-example.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/Piechart.js",["86","87","88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":10,"column":8,"nodeType":"95","messageId":"96","endLine":10,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":12,"column":8,"nodeType":"95","messageId":"96","endLine":12,"endColumn":22},{"ruleId":"93","severity":1,"message":"98","line":15,"column":8,"nodeType":"95","messageId":"96","endLine":15,"endColumn":18},{"ruleId":"99","severity":1,"message":"100","line":209,"column":13,"nodeType":"101","endLine":240,"endColumn":4},{"ruleId":"99","severity":1,"message":"100","line":17,"column":13,"nodeType":"101","endLine":20,"endColumn":4},{"ruleId":"99","severity":1,"message":"102","line":20,"column":6,"nodeType":"103","endLine":20,"endColumn":34,"suggestions":"104"},{"ruleId":"93","severity":1,"message":"105","line":42,"column":11,"nodeType":"95","messageId":"96","endLine":42,"endColumn":17},{"ruleId":"106","severity":1,"message":"107","line":89,"column":19,"nodeType":"108","messageId":"109","endLine":89,"endColumn":21},{"ruleId":"99","severity":1,"message":"100","line":17,"column":15,"nodeType":"101","endLine":208,"endColumn":6},{"ruleId":"106","severity":1,"message":"107","line":23,"column":31,"nodeType":"108","messageId":"109","endLine":23,"endColumn":33},{"ruleId":"106","severity":1,"message":"107","line":23,"column":93,"nodeType":"108","messageId":"109","endLine":23,"endColumn":95},{"ruleId":"106","severity":1,"message":"107","line":34,"column":31,"nodeType":"108","messageId":"109","endLine":34,"endColumn":33},{"ruleId":"106","severity":1,"message":"107","line":34,"column":93,"nodeType":"108","messageId":"109","endLine":34,"endColumn":95},{"ruleId":"106","severity":1,"message":"107","line":38,"column":25,"nodeType":"108","messageId":"109","endLine":38,"endColumn":27},{"ruleId":"93","severity":1,"message":"110","line":82,"column":11,"nodeType":"95","messageId":"96","endLine":82,"endColumn":15},{"ruleId":"93","severity":1,"message":"111","line":110,"column":9,"nodeType":"95","messageId":"96","endLine":110,"endColumn":13},{"ruleId":"93","severity":1,"message":"112","line":3,"column":10,"nodeType":"95","messageId":"96","endLine":3,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":11,"column":15,"nodeType":"101","endLine":222,"endColumn":6},{"ruleId":"106","severity":1,"message":"107","line":12,"column":25,"nodeType":"108","messageId":"109","endLine":12,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":191,"column":34,"nodeType":"101","messageId":"115","endLine":199,"endColumn":18},{"ruleId":"99","severity":1,"message":"116","line":222,"column":8,"nodeType":"103","endLine":222,"endColumn":14,"suggestions":"117"},{"ruleId":"99","severity":1,"message":"100","line":17,"column":15,"nodeType":"101","endLine":213,"endColumn":6},{"ruleId":"106","severity":1,"message":"107","line":23,"column":54,"nodeType":"108","messageId":"109","endLine":23,"endColumn":56},{"ruleId":"106","severity":1,"message":"107","line":34,"column":54,"nodeType":"108","messageId":"109","endLine":34,"endColumn":56},{"ruleId":"106","severity":1,"message":"107","line":38,"column":29,"nodeType":"108","messageId":"109","endLine":38,"endColumn":31},{"ruleId":"93","severity":1,"message":"110","line":84,"column":13,"nodeType":"95","messageId":"96","endLine":84,"endColumn":17},{"ruleId":"93","severity":1,"message":"111","line":112,"column":13,"nodeType":"95","messageId":"96","endLine":112,"endColumn":17},{"ruleId":"99","severity":1,"message":"100","line":31,"column":13,"nodeType":"101","endLine":451,"endColumn":4},{"ruleId":"106","severity":1,"message":"118","line":94,"column":20,"nodeType":"108","messageId":"109","endLine":94,"endColumn":22},{"ruleId":"99","severity":1,"message":"119","line":112,"column":18,"nodeType":"120","endLine":119,"endColumn":7},{"ruleId":"106","severity":1,"message":"118","line":216,"column":23,"nodeType":"108","messageId":"109","endLine":216,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":217,"column":16,"nodeType":"95","messageId":"123","endLine":217,"endColumn":17},{"ruleId":"106","severity":1,"message":"107","line":218,"column":27,"nodeType":"108","messageId":"109","endLine":218,"endColumn":29},{"ruleId":"124","severity":1,"message":"125","line":360,"column":16,"nodeType":"126","messageId":"127","endLine":360,"endColumn":34},{"ruleId":"128","severity":1,"message":"129","line":384,"column":20,"nodeType":"130","messageId":"131","endLine":384,"endColumn":29},{"ruleId":"128","severity":1,"message":"129","line":398,"column":22,"nodeType":"130","messageId":"131","endLine":398,"endColumn":31},{"ruleId":"106","severity":1,"message":"118","line":434,"column":21,"nodeType":"108","messageId":"109","endLine":434,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":11,"column":25,"nodeType":"108","messageId":"109","endLine":11,"endColumn":27},{"ruleId":"106","severity":1,"message":"118","line":20,"column":25,"nodeType":"108","messageId":"109","endLine":20,"endColumn":27},{"ruleId":"132","severity":1,"message":"133","line":104,"column":74,"nodeType":"134","messageId":"135","endLine":104,"endColumn":82},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'InputLabel' is defined but never used.","Identifier","unusedVar","'FormHelperText' is defined but never used.","'Typography' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'displayMap'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'height' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ymin' is assigned a value but never used.","'clip' is assigned a value but never used.","'drag' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'i', 'i', 'i', 'i', 'i'.","unsafeRefs","React Hook useEffect has a missing dependency: 'setPieData'. Either include it or remove the dependency array. If 'setPieData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["139"],"Expected '!==' and instead saw '!='.","Assignments to the 'radialData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-redeclare","'i' is already defined.","redeclared","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [mapData, colorMap, feature, displayMap]",{"range":"144","text":"145"},"Update the dependencies array to be: [data, setPieData]",{"range":"146","text":"147"},[542,570],"[mapData, colorMap, feature, displayMap]",[8707,8713],"[data, setPieData]"]