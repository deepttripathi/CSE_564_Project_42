[{"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/index.js":"1","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/reportWebVitals.js":"2","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/App.js":"3","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/CountryMap.js":"4","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/BarChart.js":"5","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/d3-tip-example.js":"6","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/radarChartN.js":"7","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/ScatterPlot.js":"8","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/pcp.js":"9","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/Piechart.js":"10"},{"size":500,"mtime":1620693420839,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1620693420839,"results":"13","hashOfConfig":"12"},{"size":9785,"mtime":1620871232841,"results":"14","hashOfConfig":"12"},{"size":6060,"mtime":1620871222879,"results":"15","hashOfConfig":"12"},{"size":300,"mtime":1620752352360,"results":"16","hashOfConfig":"17"},{"size":8303,"mtime":1620693610682,"results":"18","hashOfConfig":"12"},{"size":13417,"mtime":1620848804417,"results":"19","hashOfConfig":"12"},{"size":2777,"mtime":1620844574644,"results":"20","hashOfConfig":"12"},{"size":7713,"mtime":1620871210577,"results":"21","hashOfConfig":"12"},{"size":1883,"mtime":1620865541479,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"znx07f",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15s6spa",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/index.js",[],["48","49"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/reportWebVitals.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/App.js",["50","51"],"import './App.css';\nimport React, { useState, /*useRef,*/ useEffect } from 'react'\n\n\nimport { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper';\nimport { green, orange } from '@material-ui/core/colors'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n\n// import { select, /*transition,*/ line, axisBottom, scaleLinear } from 'd3'\n// import BarChart from './charts/BarChart'\nimport CountryMap from './charts/CountryMap'\nimport RadialChart from './charts/radarChartN'\nimport ParallelChart from \"./charts/pcp\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: green[500]\n    },\n    secondary: {\n      main: orange[500]\n    }\n  }\n})\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n\n\nfunction App() {\n\n  const [mapData, setMapData] = useState([{}])\n  const [radialData, setRadialData] = useState([{}])\n  const [colorMap, setColorMap] = useState([{}])\n  const [feature, setFeature] = useState(['Score'])\n  const [parallelData, setParallelData] = useState([{}])\n  // const [pieData, setPieData] = useState([{}])\n  // const [populationData, setPopulationData] = useState([{}])\n  // const [religionData, setReligionData] = useState([{}])\n  // const [pcpData, setPcpData] = useState([{}])\n\n  // const svgRef = useRef()\n\n  // var t = transition().duration(750)\n  const fetchMapData = async (feature) => {\n    const url='get_map_data/'+feature\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n    const data = await response.json()\n    return data\n  }\n\n  const fetchRadialData = async () => {\n    const response = await fetch('/get_radar_data', {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n    const data = await response.json()\n    // console.log(data)\n    return data\n  }\n\n  const fetchColorMap = async (feature) => {\n    const curl='/get_color_map/'+feature\n    const response = await fetch(curl, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n    const data = await response.json()\n    return data\n  }\n  const fetchparallelData = async()=> {\n    const response = await fetch('/get_pcp_data',{\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\" : \"*\", \n        \"Access-Control-Allow-Credentials\" : true \n      }\n    })\n    const data = await response.json()\n    console.log(\"fetch mapDta:\", data)\n    return data\n  }\n\n  // const fetchPieData = async()=> {\n  //   const response = await fetch('/get_bar_chart_data/India',{\n  //     method: \"GET\",\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       \"Access-Control-Allow-Origin\" : \"*\", \n  //       \"Access-Control-Allow-Credentials\" : true \n  //     }\n  //   })\n  //   const data = await response.json()\n  //   return data\n  // }\n\n  // const fetchPopulationData = async()=> {\n  //   const response = await fetch('/get_internet_data/Score',{\n  //     method: \"GET\",\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       \"Access-Control-Allow-Origin\" : \"*\", \n  //       \"Access-Control-Allow-Credentials\" : true \n  //     }\n  //   })\n  //   const data = await response.json()\n  //   return data\n  // }\n\n  // const fetchReligionData = async()=> {\n  //   const response = await fetch('/get_religion_data/Score',{\n  //     method: \"GET\",\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       \"Access-Control-Allow-Origin\" : \"*\", \n  //       \"Access-Control-Allow-Credentials\" : true \n  //     }\n  //   })\n  //   const data = await response.json()\n  //   return data\n  // }\n\n  // const fetchPcpData = async()=> {\n  //   const response = await fetch('/get_bar_chart_data/India',{\n  //     method: \"GET\",\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       \"Access-Control-Allow-Origin\" : \"*\", \n  //       \"Access-Control-Allow-Credentials\" : true \n  //     }\n  //   })\n  //   const data = await response.json()\n  //   return data\n  // }\n\n\n  // const mapData_from_api = fetchMapData()\n  // const radialData_from_api = fetchRadialData()\n  // const colorMap_from_api = fetchColorMap()\n\n  // setMapData(mapData_from_api)\n  // setRadialData(radialData_from_api)\n  // setColorMap(colorMap_from_api)\n\n  useEffect(async () => {\n    //make API calls here\n    console.log('start')\n    console.log('start124', feature )\n    const mapData_from_api = await fetchMapData(feature)\n    const radialData_from_api = await fetchRadialData()\n    const colorMap_from_api = await fetchColorMap(feature)\n    const pcpData_from_api = await fetchparallelData()\n    // const pieData_from_api = await fetchPieData()\n    // console.log('pieData:', pieData_from_api)\n    // const populationData_from_api = await fetchPopulationData()\n    // console.log('populationData:', populationData_from_api)\n    // const religionData_from_api = await fetchReligionData()\n    // console.log('religionData:', religionData_from_api)\n    // const pcpData_from_api = await fetchPcpData()\n    // console.log('pcpData:', pcpData_from_api)\n\n    setMapData(mapData_from_api)\n    setRadialData(radialData_from_api)\n    setColorMap(colorMap_from_api)\n    setParallelData(pcpData_from_api)\n    // setPieData(pieData_from_api)\n    // setPopulationData(populationData_from_api)\n    // setReligionData(religionData_from_api)\n    // setPcpData(pcpData_from_api)\n  }, [feature])\n\n  const classes = useStyles();\n\n  const handleChange = (event) => {\n    setFeature(event.target.value);\n  };\n\n  \n\n  //add an option bar\n  return (\n    <ThemeProvider theme={theme}>\n\n      <div>\n        <FormControl variant=\"filled\" className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-filled-label\">Select attribute</InputLabel>\n          <Select\n            labelId=\"demo-simple-select-filled-label\"\n            id=\"demo-simple-select-filled\"\n            value={feature}\n            onChange={handleChange}\n          >\n            <MenuItem value=\"\">\n              <em>Select attribute</em>\n            </MenuItem>\n            <MenuItem value={\"Score\"}>Score</MenuItem>\n            <MenuItem value={\"Overall rank\"}>Overall rank</MenuItem>\n            <MenuItem value={\"GDP per capita\"}>GDP per capita</MenuItem>\n            <MenuItem value={\"Social support\"}>Social support</MenuItem>\n            <MenuItem value={\"Healthy life expectancy\"}>Healthy life expectancy</MenuItem>\n            <MenuItem value={\"Freedom to make life choices\"}>Freedom to make life choices</MenuItem>\n            <MenuItem value={\"Generosity\"}>Generosity</MenuItem>\n            <MenuItem value={\"Perceptions of corruption\"}>Perceptions of corruption</MenuItem>\n            <MenuItem value={\"Population\"}>Population</MenuItem>\n            <MenuItem value={\"Percentage\"}>Percentage</MenuItem>\n            <MenuItem value={\"percentage_non_religious\"}>Percentage non-religious</MenuItem>\n          </Select>\n        </FormControl>\n      </div>\n\n      <Container style={{ padding: \"0px\", margin: \"0px\" }}>\n\n        <Grid container style={{ height: \"47vh\", width: \"100vw\" }}>\n          <Grid style={{ height: \"100%\" }} item xs={3}>\n            <Paper style={{ height: \"100%\" }} className={classes.paper}>\n              <RadialChart radialData={radialData}></RadialChart>\n            </Paper>\n          </Grid>\n          <Grid style={{ height: \"100%\" }} item xs={6}>\n            <Paper style={{ height: \"100%\" }} className={classes.paper}>\n              <CountryMap mapData={mapData} colorMap={colorMap} feature={feature} />\n            </Paper>\n          </Grid>\n          <Grid style={{ height: \"100%\" }} item xs={3}>\n            <Paper style={{ height: \"100%\" }} className={classes.paper}>\n              <svg style={{ height: \"100%\", width: \"100%\" }}>\n              </svg>\n            </Paper>\n          </Grid>\n        </Grid>\n\n\n        <Grid container style={{ height: \"40vh\", width: \"100vw\" }}>\n          <Grid style={{ height: \"100%\" }} item xs={3}>\n            <Paper style={{ height: \"100%\" }} className={classes.paper}>\n              <svg style={{ height: \"100%\", width: \"100%\" }}>\n              </svg>\n            </Paper>\n          </Grid>\n          <Grid style={{ height: \"100%\" }} item xs={6}>\n            <Paper style={{ height: \"100%\" }} className={classes.paper}>\n              {/* <svg style={{ height: \"100%\", width: \"100%\" }}> */}\n              {/* </svg> */}\n              <ParallelChart data={parallelData}/>\n            </Paper>\n          </Grid>\n          <Grid style={{ height: \"100%\" }} item xs={3}>\n            <Paper style={{ height: \"100%\" }} className={classes.paper}>\n              <svg style={{ height: \"100%\", width: \"100%\" }}>\n              </svg>\n            </Paper>\n          </Grid>\n        </Grid>\n\n\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/CountryMap.js",["52","53"],"import React, { useRef, useEffect } from \"react\"\n// import * as d3Module from \"d3\"\nimport d3 from \"./d3-tip-example\"\nimport * as topojson from \"topojson\"\nimport data from './world_countries.json'\n// import * as d3legend from \"./d3-legend\";\nimport {event, zoom as zoomM} from 'd3'\nconst format = d3.format(\",\")\n\n// const d3 = {\n//   ...d3Module,\n\n// }\nexport default function CountryMap({ mapData, colorMap, feature }) {\n  const svgRef = useRef()\n\n  useEffect(async () => {\n    console.log('Feature:', feature)\n\n    displayMap(mapData, colorMap, feature)\n  }, [mapData, colorMap,feature])\n\n\n\n  // d3.select(\"#menu\").on(\"change\", function(){\n  //     selected_feature=d3.select(\"#menu\").property(\"value\");\n  //     // console.log(selected_feature)\n  //     displayMap(selected_feature) })\n\n\n\n  async function displayMap(mapData, colorMap, feature) {\n\n    const tip = d3.tip()\n      .attr('class', 'd3-tip')\n      .offset([-10, 0])\n      .html(function (d, name) {\n        return `<strong>Country: </strong><span class='details'> ${d.properties.name} <br></span><strong>${name}: </strong><span class='details'> ${format(d[name])}</span>`;\n      })\n\n    const margin = { top: 0, right: 0, bottom: 0, left: 0 }\n    const width = 800 - margin.left - margin.right\n    const height = 500 - margin.top - margin.bottom\n\n    const color = d3.scaleThreshold()\n      .domain([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n      .range([\"rgb(247,251,255)\", \"rgb(222,235,247)\", \"rgb(198,219,239)\", \"rgb(158,202,225)\", \"rgb(107,174,214)\", \"rgb(66,146,198)\", \"rgb(33,113,181)\", \"rgb(8,81,156)\", \"rgb(8,48,107)\", \"rgb(3,19,43)\"])\n\n    \n\n    // var options = [\"Score\", \"Overall rank\", \"GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\",\n    //   \"Perceptions of corruption\", \"Population\", \"Percentage\", \"percentage_non_religious\"]\n    const svg = d3.select(svgRef.current)\n      // .attr(\"width\", width)\n      // .attr(\"height\", height)\n      .attr('class', 'map')\n      .attr('id', 'worldmap')\n      .append('g')\n\n      // const width = +svg.attr('width')\n      // const height = +svg.attr('height')\n    \n    // const g = svg.append('g')\n\n\n    // d3.select('.list')\n    //   .selectAll('myOptions')\n    //   .data(options)\n    //   .enter()\n    //   .append('option')\n    //   .text(function (d) { return d; }) // text showed in the menu\n    //   .attr(\"value\", function (d) { return d; })\n\n    const projection = d3.geoMercator()\n      .scale(80)\n      .translate([width / 2.5, height / 2])\n\n    const path = d3.geoPath()\n      .projection(projection)\n\n    svg.call(tip)\n\n\n\n    var optionByCountry = {};\n    var colorVal = {};\n\n    mapData.forEach(function (d) {\n      optionByCountry[d.iso] = +d[feature];\n    });\n\n    // var max=0\n    // function getMaxVal() {\n    //   return mapData.reduce((max, p) => +p[feature] > max ? +p[feature]: max, mapData[0][feature]);\n    // }\n    // var maxVal=getMaxVal()\n\n    // var min=-2\n    // function getMinVal() {\n    //   return mapData.reduce((min, p) => +p[feature] < min ? +p[feature]: min, mapData[0][feature]);\n    // }\n    // var minVal=getMinVal()\n\n    // var range=(maxVal/10)\n\n    // var i;\n    // var label=[]\n    // var xmin=minVal\n    // range=range.toFixed(2)\n    // for (i = 0; i < 10; i++) { \n    //   xmin=Number(xmin).toFixed(2)\n    //   var newrange=(Number(xmin)+Number(range)).toFixed(2)\n    //   label[i]=((xmin).toString())+\"-\"+(newrange.toString());\n    //   xmin=newrange\n    // }\n\n    // if(document.getElementById(\"legend\"))\n    // document.getElementById(\"legend\").remove();\n\n    // //adding legend\n    // var g = svg.append(\"g\")\n    // .attr(\"class\", \"legendThreshold\")\n    // .attr(\"transform\", \"translate(5,320)\");\n    // g.append(\"text\")\n    // .attr(\"class\", \"caption\")\n    // .attr(\"id\",\"legend\")\n    // .attr(\"x\", 0)\n    // .attr(\"y\", -10)\n    // .text(function (d){\n    //   return feature;\n    // });\n\n    // var legend = d3.legendColor()\n    // .labels(function (d) { return label[d.i]; })\n    // .shapePadding(4)\n    // .scale(color);\n    // svg.select(\".legendThreshold\")\n    // .call(legend);\n\n    colorMap.forEach(function (d) {\n      colorVal[d.iso] = d[feature + \"_scaled\"];\n    });\n\n    // console.log(colorVal)\n    data.features.forEach(function (d) { d[feature] = optionByCountry[d.id] });\n     svg.append(\"g\")\n      .attr(\"class\", \"countries\")\n      .selectAll(\"path\")\n      .data(data.features)\n      .enter().append(\"path\")\n      .attr(\"d\", path)\n      .style(\"fill\", function (d) {\n        return color(colorVal[d.id]);\n      })\n      .style('stroke', 'white')\n      .style('stroke-width', 1.5)\n      .style(\"opacity\", 0.8)\n      // tooltips\n      .style(\"stroke\", \"white\")\n      .style('stroke-width', 0.3)\n      .on('mouseover', function (d) {\n\n        tip.show(d, feature);\n        d3.select(this)\n          .style(\"opacity\", 1)\n          .style(\"stroke\", \"white\")\n          .style(\"stroke-width\", 3)\n      })\n      .on('mouseout', function (d) {\n        tip.hide(d, feature);\n\n        d3.select(this)\n          .style(\"opacity\", 0.8)\n          .style(\"stroke\", \"white\")\n          .style(\"stroke-width\", 0.3);\n      })\n      .on('click', function (d) {\n        console.log(d.properties.name);\n        var country = d.properties.name;\n        // drawBarChart(d.properties.name)\n        // drawRadarPlot(d.properties.name); //print selected country name\n      });\n\n   svg.append(\"path\")\n      .data(topojson.mesh(data.features, function (a, b) { return a.id !== b.id; }))\n      .attr(\"class\", \"names\")\n      .attr(\"d\", path);\n\n    let zoom = zoomM()\n        .scaleExtent([0.5, 5])\n        .translateExtent([[0, 0], [1500, 1000]])\n        .on('zoom', () => {\n            console.log('hello dere',+svg.attr('height'));\n            // var g= d3.select(this)\n            // svg.selectAll('paths')\n            // svg.selectAll('g')\n              svg.attr('transform', event.transform)\n        });\n    svg.call(zoom);\n  }\n  return (\n    <svg style={{ height: \"100%\", width: \"100%\" }} className='svgcontainer' id='svg' ref={svgRef}>\n    </svg>\n  )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/BarChart.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/d3-tip-example.js",[],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/radarChartN.js",["54","55","56","57","58","59","60","61"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3Module from \"d3\"\n\nconst d3 = {\n    ...d3Module\n}\n\n\n\n        \n// async function drawRadarPlot(country){\n\n//     chart_url=radar_url;\n//     console.log(chart_url);\n//     var bar_data=await getJson(chart_url);\n\n//     console.log(country)\n\n//     if (country !== 'undefined'){\n//         RadarChart(bar_data, country);\n//     }\n//     else{\n//         console.log('inside draw radar');\n//         RadarChart(bar_data);\n//     }\n        \n\nexport default function RadialChart({radialData}) {\n\n\n    // console.log('Radial data: ', radialData);\n    const svgRef = useRef()\n\n    useEffect(async () => {\n    var cfg = {\n      w: 300, //Width of the circle\n      h: 300, //Height of the circle\n      margin: {top: 20, right: 20, bottom: 20, left: 20}, //The margins of the SVG\n      labelFactor: 0.5,  //How much farther than the radius of the outer circle should the labels be placed\n      wrapWidth: 5,      //The number of pixels after which a label needs to be given a new line\n      opacityArea: 0.35,  //The opacity of the area of the blob\n      dotRadius: 4,       //The size of the colored circles of each blog\n      opacityCircles: 0.1,//The opacity of the circles of each blob\n      strokeWidth: 0.7,   //The width of the stroke around each blob\n      roundStrokes: false,//If true the area and stroke will follow a round path (cardinal-closed)\n      color: d3.scaleOrdinal(d3.schemeCategory10),  //Color function\n      hover: true,\n      axisLabels: true,\n      tickLabels: true,\n      fields: false,\n      scalesAndAxes: false,\n    };\n  \n   \n    // console.log(data)\n\n    // function userExists(countryName) {\n    //     return data.some(function(el) {\n    //         if (el.country === countryName){\n    //             console.log('----')\n    //             console.log([el])\n    //             data=[el]\n    //         }\n    // }); \n    // }\n    // // \n    // userExists(country_name)\n    // console.log('-----')\n    // console.log(country_name)\n    // if (country_name !== 'undefined'){\n    //     cfg.opacityArea=0.01\n    // }\n    // else{\n    //     cfg.opacityArea=0.35\n    // }\n\n    var fieldNames= [\"GDP per capita\",\"Social support\",\"Healthy life expectancy\",\"Freedom to make life choices\",\"Generosity\",\n    \"Perceptions of corruption\",\"Percentage\",\"percentage_non_religious\"]\n\n    // //Put all of the options into a variable called cfg\n    // if('undefined' !== typeof options){\n    //   for(var i in options){\n    //     if('undefined' !== typeof options[i]){ cfg[i] = options[i]; }\n    //   }\n    // }\n  \n    // If fields specified, filter and sort data to fields\n    if (cfg.fields != false){\n        radialData = subsetAndSortData(radialData, cfg.fields);\n    } else {\n      cfg.fields = fieldNames;\n    }\n  \n    // Auto-generate scales and axes from given data extents or use given ones.\n    var autos;\n    if (cfg.scalesAndAxes === false){\n      autos = autoScalesAxes(radialData);\n    } else {\n      autos = cfg.scalesAndAxes;\n    }\n    var scales = cfg.fields.map(function(k){ return autos[k].scale; });\n    var axes = cfg.fields.map(function(k){ return autos[k].axis; });\n  \n    // Rearrange data to an array of arrays\n    radialData = radialData.map(function(row){\n      var newRow = cfg.fields.map(function(key) {\n          return {\"axis\": key, \"value\": row[key]};\n      });\n      return newRow;\n    });\n  \n    var total = cfg.fields.length,            //The number of different axes\n      radius = Math.min(cfg.w/2, cfg.h/2),    //Radius of the outermost circle\n        // radius=150,\n      angleSlice = Math.PI * 2 / total;  \n      console.log(\"Radius,\", radius)     //The width in radians of each \"slice\"\n  \n    // Update ranges of scales to match radius.\n    scales = scales.map(function(i){\n      // This is gross - no other way to get ordinal scales to behave correctly.\n      if (typeof i.rangePoints !== 'undefined'){\n          return i.rangePoints([0, radius]);\n      } else {\n          return i.range([0, radius]);\n      }\n    });\n  \n    /////////////////////////////////////////////////////////\n    //////////// Create the container SVG and g /////////////\n    /////////////////////////////////////////////////////////\n  \n    //Remove whatever chart with the same id/class was present before\n    // if (document.getElementById(\"radarplot\")) {\n    //     console.log('radar plot present')\n    //     document.getElementById(\"radarplot\").remove()\n    // }\n    // d3.select('radarplot').select(\"svg\").remove();\n\n    \n    //Initiate the radar chart SVG\n    var svg1 = d3.select(svgRef.current)\n    //   .attr(\"width\",  680)\n    //   .attr(\"height\", 700)\n      .attr(\"class\", \"radar\")\n      .attr('id','radarplot');\n  \n    //Append a g element\n    var g = svg1.append(\"g\")\n    .attr(\"transform\", \"translate(\" + (cfg.w/2 + cfg.margin.left) + \",\" + (cfg.h/2 + cfg.margin.top) + \")\");\n  \n    /////////////////////////////////////////////////////////\n    //////////////////// Draw the axes //////////////////////\n    /////////////////////////////////////////////////////////\n  \n    //Wrapper for the grid & axes\n    var axisGrid = g.append(\"g\").attr(\"class\", \"axisWrapper\");\n  \n    //Create the straight lines radiating outward from the center\n    var axis = axisGrid.selectAll(\".axis\")\n      .data(cfg.fields)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"axis\");\n  \n    //Append the axes\n    var axisGroup = axis.append(\"g\")\n      .attr(\"transform\", function(d, i){ return \"rotate(\" + (180 / Math.PI * (i * angleSlice) + 270) + \")\"; })\n      .each(function(d, i){\n        var ax = axes[i];\n        if (cfg.tickLabels !== true){\n          ax = ax.tickFormat(function(d){ return \"\"; });\n        }\n        ax(d3.select(this));\n      });\n  \n    //Append axis category labels\n    if (cfg.axisLabels === true){\n        axisGroup.append(\"text\")\n        .attr(\"class\", \"legend\")\n        .style(\"font-size\", \"11px\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"transform\", \"translate(\" + radius * cfg.labelFactor + \", 20)\")\n        .attr(\"dy\", \"0.35em\")\n        .text(function(d){\n            return d;})\n        .call(wrap, cfg.wrapWidth)\n        .attr(\"fill\",'black')\n    }\n  \n    /////////////////////////////////////////////////////////\n    ///////////// Draw the radar chart blobs ////////////////\n    /////////////////////////////////////////////////////////\n  \n  \n    //The radial line function\n    var radarLine = d3.lineRadial()\n        .curve(d3.curveLinear)\n        .radius(function(d, i) { return scales[i](d.value); })\n      .angle(function(d,i) {  return i*angleSlice; });\n  \n    if(cfg.roundStrokes) {\n      radarLine.interpolate(\"cardinal-closed\");\n    }\n  \n    //Create a wrapper for the blobs\n    var blobWrapper = g.selectAll(\".radarWrapper\")\n      .data(radialData)\n      .enter().append(\"g\")\n      .attr(\"class\", \"radarWrapper\");\n  \n    //Append the backgrounds\n    blobWrapper\n      .append(\"path\")\n      .attr(\"class\", \"radarArea\")\n      .attr(\"d\", function(d,i) { return radarLine(d); })\n      .style(\"fill\", function(d,i) { \n        //   console.log()\n          return cfg.color(i); })\n      .style(\"fill-opacity\", cfg.opacityArea)\n      .on('mouseover', function (d,i){\n        if (cfg.hover === true){\n          //Dim all blobs\n          d3.selectAll(\".radarArea\")\n            .transition().duration(200)\n            .style(\"fill-opacity\", 0.01);\n          //Bring back the hovered over blob\n          d3.select(this)\n            .transition().duration(200)\n            .style(\"fill-opacity\", 0.7);\n        }\n      })\n      .on('mouseout', function(){\n        if (cfg.hover === true){\n          //Bring back all blobs\n          d3.selectAll(\".radarArea\")\n            .transition().duration(200)\n            .style(\"fill-opacity\", cfg.opacityArea);\n        }\n      });\n  \n    //Create the outlines\n    blobWrapper.append(\"path\")\n      .attr(\"class\", \"radarStroke\")\n      .attr(\"d\", function(d,i) { return radarLine(d); })\n      .style(\"stroke-width\", cfg.strokeWidth + \"px\")\n      .style(\"stroke\", function(d,i) { return cfg.color(i); })\n      .style(\"fill\", \"none\");\n  \n    //Append the circles\n    blobWrapper.selectAll(\".radarCircle\")\n      .data(function(d,i) { return d; })\n      .enter().append(\"circle\")\n      .attr(\"class\", \"radarCircle\")\n      .attr(\"r\", cfg.dotRadius)\n      .attr(\"cx\", function(d,i){ return scales[i](d.value) * Math.cos(angleSlice*i - Math.PI/2); })\n      .attr(\"cy\", function(d,i){ return scales[i](d.value) * Math.sin(angleSlice*i - Math.PI/2); })\n      .style(\"fill\", function(d,i,j) { return cfg.color(j); })\n      .style(\"fill-opacity\", 0.8);\n  \n    /////////////////////////////////////////////////////////\n    //////// Append invisible circles for tooltip ///////////\n    /////////////////////////////////////////////////////////\n  \n    if (cfg.hover === true){\n  \n      //Wrapper for the invisible circles on top\n      var blobCircleWrapper = g.selectAll(\".radarCircleWrapper\")\n        .data(radialData)\n        .enter().append(\"g\")\n        .attr(\"class\", \"radarCircleWrapper\");\n  \n      //Append a set of invisible circles on top for the mouseover pop-up\n      blobCircleWrapper.selectAll(\".radarInvisibleCircle\")\n        .data(function(d,i) { return d; })\n        .enter().append(\"circle\")\n        .attr(\"class\", \"radarInvisibleCircle\")\n        .attr(\"r\", cfg.dotRadius*1.5)\n        .attr(\"cx\", function(d,i){ return scales[i](d.value) * Math.cos(angleSlice*i - Math.PI/2); })\n        .attr(\"cy\", function(d,i){ return scales[i](d.value) * Math.sin(angleSlice*i - Math.PI/2); })\n        .style(\"fill\", \"none\")\n        .style(\"pointer-events\", \"all\")\n        .on(\"mouseover\", function(d,i) {\n          var newX =  parseFloat(d3.select(this).attr('cx')) - 10;\n        var newY =  parseFloat(d3.select(this).attr('cy')) - 10;\n  \n          tooltip\n            .attr('x', newX)\n            .attr('y', newY)\n            .text(function(x){return d.value;})\n            .transition().duration(200)\n            .style('opacity', 1);\n        })\n        .on(\"mouseout\", function(){\n          tooltip.transition().duration(200)\n            .style(\"opacity\", 0);\n        });\n  \n      //Set up the small tooltip for when you hover over a circle\n      var tooltip = g.append(\"text\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 0);\n  }\n  \n    /////////////////////////////////////////////////////////\n    /////////////////// Helper Function /////////////////////\n    /////////////////////////////////////////////////////////\n  \n    //Taken from http://bl.ocks.org/mbostock/7555321\n    //Wraps SVG text\n    function wrap(text, width) {\n        console.log('text',text)\n\n      text.each(function() {\n          console.log('text',text)\n        var text = d3.select(this),\n          words = text.text().split(/\\s+/).reverse(),\n          word,\n          line = [],\n          lineNumber = 0,\n          lineHeight = 1.4, // ems\n          y = text.attr(\"y\"),\n          x = text.attr(\"x\"),\n          dy = parseFloat(text.attr(\"dy\")),\n          tspan = text.text(null).append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n  \n        while (word = words.pop()) {\n          line.push(word);\n          tspan.text(line.join(\" \"));\n          if (tspan.node().getComputedTextLength() > width) {\n            line.pop();\n            tspan.text(line.join(\" \"));\n            line = [word];\n            tspan = text.append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n          }\n        }\n      });\n    }//wrap\n  \n  //RadarChart\n  \n  \n  /*\n   * Given a dataset which is an array of objects (that all have the same\n   * fields), filter and sort those fields\n   *\n   */\n  function subsetAndSortData(data, fields){\n    data = data.map(function(row){\n      var newRow = {};\n      fields.map(function(key) {\n        newRow[key] = row[key];\n      });\n      return newRow;\n    });\n    return data;\n  }\n  \n  function autoScalesAxes(data){\n  \n    var ret = {};\n    // var fieldNames = Object.keys(data[0]);\n    // console.log(fieldNames)\n\n    fieldNames.map(function(i){\n  \n      // Get all data for axis\n      var axisData = data.map(function(row){\n        return row[i];\n      });\n  \n      var scale;\n      var axis;\n  \n      // Autogenerate a scale\n      if ((typeof axisData[0] === \"string\") || (typeof axisData[0] === \"boolean\")){\n  \n        // Non-numeric things get an ordinal scale\n        var uniqueValues = d3.map(data, function(a){return a[i]; }).keys();\n        uniqueValues.unshift(\"  \"); // Padding, so it doesn't start from the center\n  \n        scale = d3.scaleOrdinal()\n          .domain(uniqueValues);\n  \n        axis = d3.axisBottom(scale)\n          .tickValues(uniqueValues)\n  \n      } else {\n  \n          // Numeric values get a linear scale\n        var extent = d3.extent(data, function(a){\n            return a[i];\n        });\n        \n        console.log(extent)\n        scale = d3.scaleLinear()\n          .domain(extent);\n  \n        axis = d3.axisBottom(scale)\n          .tickFormat(function(d, i){ \n              if(i != 0){\n                  return d + \"\";\n                } else {\n                    return \"\";\n                }\n              })\n  \n      }\n  \n      ret[i] = {};\n      ret[i].scale = scale;\n      ret[i].axis = axis;\n  \n    });\n    return ret;\n  \n  }\n},[radialData])\nreturn(\n    <svg style={{ height: \"100%\", width: \"100%\" }} className='radar' ref={svgRef}></svg>\n    )\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/ScatterPlot.js",["62"],"/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/pcp.js",["63"],"import React, { useRef, useEffect } from \"react\"\nimport * as d3Module from \"d3\"\nimport {drag, event} from 'd3'\nconst d3 = {\n    ...d3Module\n}\n\nexport default function ParallelChart({data}){\n    const svgRef = useRef()\n\n    useEffect(async () => {\n        \n    // if (dimensions.length==0)\n    //      dimensions = [\"Customer_Age\", \"Months_on_book\", \"Credit_Limit\", \"Total_Revolving_Bal\",\n    //     \"Avg_Open_To_Buy\", \"Total_Amt_Chng_Q4_Q1\", \"Total_Trans_Amt\", \"Total_Ct_Chng_Q4_Q1\",\n    //     \"Avg_Utilization_Ratio\"]\n\n    // if (((document.getElementsByClassName(\"active\")).length)==0)\n    //     document.getElementById(\"parallelplot\").className = \"active\";\n    // else{\n    //   document.getElementsByClassName(\"active\")[0].className = \"\";\n    //   document.getElementById(\"parallelplot\").className = \"active\";\n    // }\n    // if(document.getElementById(\"scattersvg\")){\n    //   document.getElementById(\"scattersvg\").remove();\n    // }\n    // if (document.getElementById(\"table\")){\n    //   document.getElementById(\"table\").remove();\n    // }\n    // if (document.getElementById(\"button\")){\n    //   document.getElementById(\"button\").remove();\n    // }\n\n    var margin = {top: 30, right: 10, bottom: 10, left: 20};\n    var width = 640 ;\n    var height = 250 ;\n\n    var x = d3.scalePoint().range([1, width-1], 1),\n        y = {},\n        dragging = {};\n\n    var line = d3.line(),\n        axis = d3.axisLeft(),\n        background,\n        foreground;\n\n    var svg = d3.select(svgRef.current).attr(\"class\",\"scatter\")\n        .attr(\"id\",\"scattersvg\")\n        // .attr(\"width\", width + margin.left + margin.right)\n        // .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var dimensions = ['Score',\"GDP per capita\",\"Social support\",\"Healthy life expectancy\",\"Freedom to make life choices\",\"Generosity\",\n    \"Perceptions of corruption\",'Population',\"Percentage\",\"percentage_non_religious\" ]\n\n    var updatedDimensions=['Score','GDP','Social','Health','Freedom','Generosity','Corruption','Population','Internet users','Non-religious']\n    // d3.csv(\"new.csv\", (error, data) => {\n\n            // Extract the list of dimensions and create a scale for each.\n            // x.domain(dimensions = d3.keys(data[0]).filter(function(d) {\n            //     return d != \"clusterId\" && (y[d] = d3.scaleLinear()\n            //         .domain(d3.extent(data, function(p) { return +p[d]; }))\n            //         .range([height, 0]));\n            // }));\n            x.domain(dimensions);\n            dimensions.forEach(d => {\n                y[d] = d3.scaleLinear()\n                    .domain(d3.extent(data, function (p) {\n                        // console.log('ggg', +p[d])\n                        return +p[d];\n                    }))\n                    .range([height, 0]);\n                y[d].brush = d3.brushY().extent([[-8, y[d].range()[1]], [0, y[d].range()[0]]])\n                    .on(\"brush\", brush);\n            });\n            // Add grey background lines for context.\n            background = svg.append(\"g\")\n                .attr(\"class\", \"background\")\n                .selectAll(\"path\")\n                .data(data)\n                .enter().append(\"path\")\n                .attr(\"d\", path);\n\n            // Add blue foreground lines for focus.\n            foreground = svg.append(\"g\")\n                .attr(\"class\", \"foreground\")\n                .selectAll(\"path\")\n                .data(data)\n                .enter().append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"style\", function (d, i) {\n                    return \"stroke: rgb(33,113,181);\";\n                });\n\n            // Add a group element for each dimension.\n            var g = svg.selectAll(\".dimension\")\n                .data(dimensions)\n                .enter().append(\"g\")\n                .attr(\"class\", \"dimension\")\n                .attr(\"transform\", function (d) { \n                    return \"translate(\" + x(d) + \")\"; })\n                .call(drag()\n                    .subject(function (d) { return { x: x(d) }; })\n                    .on(\"start\", function (d) {\n                        dragging[d] = x(d);\n                        background.attr(\"visibility\", \"hidden\");\n                        \n                        // text.attr('visibility','hidden')\n                        // text.attr('text','white' )\n                    })\n                    .on(\"drag\", function (d) {\n                        dragging[d] = Math.min(width, Math.max(0, event.x));\n                        foreground.attr(\"d\", path);\n                        dimensions.sort(function (a, b) { return position(a) - position(b); });\n                        x.domain(dimensions);\n                        g.attr(\"transform\", function (d) { return \"translate(\" + position(d) + \")\"; });\n                    })\n                    .on(\"end\", function (d) {\n                        // console.log(\"Before dragging\", dragging[d]);\n                        delete dragging[d];\n                        console.log(\"After dragging\", dragging[d]);\n                        transition(d3.select(this)).attr(\"transform\", \"translate(\" + x(d) + \")\");\n                        transition(foreground).attr(\"d\", path);\n                        background\n                            .attr(\"d\", path)\n                            .transition()\n                            .delay(500)\n                            .duration(0)\n                            .attr(\"visibility\", null);\n                        // text.attr('visibility','visible')\n\n                    }));\n\n            // Add an axis and title.\n             g.append(\"g\")\n                .attr(\"class\", \"axis\")\n                .each(function (d) { d3.select(this).call(axis.scale(y[d])); })\n                .append(\"text\")\n                .attr('fill','black')\n                .style(\"text-anchor\", \"middle\")\n                .attr(\"y\", -5)\n                .text(function (d) {\n                    // console.log('pcp text',d)\n                    const index = dimensions.findIndex(dim => dim === d);\n                    // console.log(updatedDimensions[index]);\n                    return updatedDimensions[index]\n                    // return d;\n                });\n                // .style('cursor','move');\n\n            // Add and store a brush for each axis.\n            g.append(\"g\")\n                .attr(\"class\", \"brush\")\n                .each(function (d) {\n                    d3.select(this).call(y[d].brush);\n                })\n                .selectAll(\"rect\")\n                .attr(\"x\", -8)\n                .attr(\"width\", 16);\n        // });\n\n    function position(d) {\n    var v = dragging[d];\n    return v == null ? x(d) : v;\n    }\n\n    function transition(g) {\n    return g.transition().duration(500);\n    }\n\n    // Returns the path for a given data point.\n    function path(d) {\n    return line(dimensions.map(function(p) { return [position(p), y[p](d[p])]; }));\n    }\n\n    function brush() {\n  const actives = [];\n  // filter brushed extents\n  svg.selectAll('.brush')\n    .filter(function(d){\n      return d3.brushSelection(this);\n    })\n    .each(function(d) {\n      actives.push({\n        dimension: d,\n        extent: d3.brushSelection(this)\n      });\n    });\n  // set un-brushed foreground line disappear\n  foreground.style('display', function(d) {\n    return actives.every(function(active) {\n      const dim = active.dimension;\n      return active.extent[0] <= y[dim](d[dim]) && y[dim](d[dim]) <= active.extent[1];\n    }) ? null : 'none';\n  });\n\n}\n\n\n    },[data])\n    return (\n        <svg style={{ height: \"100%\", width: \"100%\" }} ref={svgRef}></svg>\n        )\n\n}","/Users/deepttripathi/Dev/CSE_564_Project_42/frontend/src/charts/Piechart.js",["64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":12,"column":8,"nodeType":"72","messageId":"73","endLine":12,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":185,"column":13,"nodeType":"76","endLine":210,"endColumn":4},{"ruleId":"74","severity":1,"message":"75","line":17,"column":13,"nodeType":"76","endLine":21,"endColumn":4},{"ruleId":"70","severity":1,"message":"77","line":179,"column":13,"nodeType":"72","messageId":"73","endLine":179,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":34,"column":15,"nodeType":"76","endLine":417,"endColumn":2},{"ruleId":"78","severity":1,"message":"79","line":88,"column":20,"nodeType":"80","messageId":"81","endLine":88,"endColumn":22},{"ruleId":"74","severity":1,"message":"82","line":105,"column":18,"nodeType":"83","endLine":110,"endColumn":7},{"ruleId":"84","severity":1,"message":"85","line":314,"column":30,"nodeType":"72","messageId":"86","endLine":314,"endColumn":34},{"ruleId":"87","severity":1,"message":"88","line":326,"column":16,"nodeType":"89","messageId":"90","endLine":326,"endColumn":34},{"ruleId":"91","severity":1,"message":"92","line":350,"column":18,"nodeType":"93","messageId":"94","endLine":350,"endColumn":26},{"ruleId":"91","severity":1,"message":"92","line":364,"column":20,"nodeType":"93","messageId":"94","endLine":364,"endColumn":28},{"ruleId":"78","severity":1,"message":"79","line":400,"column":20,"nodeType":"80","messageId":"81","endLine":400,"endColumn":22},{"ruleId":"74","severity":1,"message":"95","line":96,"column":8,"nodeType":"96","endLine":96,"endColumn":14,"suggestions":"97"},{"ruleId":"74","severity":1,"message":"75","line":11,"column":15,"nodeType":"76","endLine":201,"endColumn":6},{"ruleId":"74","severity":1,"message":"98","line":25,"column":8,"nodeType":"96","endLine":25,"endColumn":17,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":65,"column":74,"nodeType":"102","messageId":"103","endLine":65,"endColumn":82},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'FormHelperText' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'country' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Assignments to the 'radialData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-use-before-define","'text' was used before it was defined.","usedBeforeDefined","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'margin.bottom', 'margin.left', 'margin.right', and 'margin.top'. Either include them or remove the dependency array.","ArrayExpression",["106"],"React Hook useEffect has a missing dependency: 'drawChart'. Either include it or remove the dependency array.",["107"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [data, margin.bottom, margin.left, margin.right, margin.top]",{"range":"112","text":"113"},"Update the dependencies array to be: [drawChart, pieData]",{"range":"114","text":"115"},[2632,2638],"[data, margin.bottom, margin.left, margin.right, margin.top]",[609,618],"[drawChart, pieData]"]